// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.13.0
// source: Auth.proto

package talon

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuthMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId       *string  `protobuf:"bytes,1,opt,name=recordId" json:"recordId,omitempty"`                  // a unique identifier that is associated with each authentication event record
	Timestamp      *int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`               // an integer that represents the date and time (in milliseconds) at which IngestServer received the authentication record
	FeedId         *string  `protobuf:"bytes,3,opt,name=feedId" json:"feedId,omitempty"`                      // a constant in every row that identifies the record type
	StartTime      *int64   `protobuf:"varint,4,opt,name=startTime" json:"startTime,omitempty"`               // the date and time (in milliseconds) at which the authentication event started
	UserId         *string  `protobuf:"bytes,5,opt,name=userId" json:"userId,omitempty"`                      // the unique identifier of the user that is associated with the authentication event
	SrcHostname    *string  `protobuf:"bytes,6,opt,name=srcHostname" json:"srcHostname,omitempty"`            // the host name of the device from which the user is authenticating
	SrcIpAddress   *string  `protobuf:"bytes,7,opt,name=srcIpAddress" json:"srcIpAddress,omitempty"`          // the IP address of the device from which the user is authenticating
	DcHostname     *string  `protobuf:"bytes,8,opt,name=dcHostname" json:"dcHostname,omitempty"`              // the host name of the server or domain controller of the user that is performing authentication
	DcIpAddress    *string  `protobuf:"bytes,9,opt,name=dcIpAddress" json:"dcIpAddress,omitempty"`            // the host name of the server or domain controller of the user that is performing authentication
	Status         *int32   `protobuf:"varint,10,opt,name=status" json:"status,omitempty"`                    // an integer that represents the status of the authentication attempt, where 0 indicates a successful authentication
	FailedReason   *string  `protobuf:"bytes,11,opt,name=failedReason" json:"failedReason,omitempty"`         // the reason that is associated with a failed authentication attempt
	Domain         *string  `protobuf:"bytes,12,opt,name=domain" json:"domain,omitempty"`                     // the authentication domain
	Email          *string  `protobuf:"bytes,1000,opt,name=email" json:"email,omitempty"`                     // the email address of the user that is associated with the authentication event
	Lname          *string  `protobuf:"bytes,1001,opt,name=lname" json:"lname,omitempty"`                     // the first name of the user that is associated with the authentication event
	Fname          *string  `protobuf:"bytes,1002,opt,name=fname" json:"fname,omitempty"`                     // the last name of the user that is associated with the authentication event
	Division       *string  `protobuf:"bytes,1003,opt,name=division" json:"division,omitempty"`               // the division of the user that is associated with the authentication event
	Department     *string  `protobuf:"bytes,1004,opt,name=department" json:"department,omitempty"`           // the department of the user that is associated with the authentication event
	City           *string  `protobuf:"bytes,1005,opt,name=city" json:"city,omitempty"`                       // the city of the user that is associated with the authentication event
	Region         *string  `protobuf:"bytes,1006,opt,name=region" json:"region,omitempty"`                   // the region of the user that is associated with the authentication event
	Country        *string  `protobuf:"bytes,1007,opt,name=country" json:"country,omitempty"`                 // the country of the user that is associated with the authentication event
	PeerGroup      *string  `protobuf:"bytes,1008,opt,name=peerGroup" json:"peerGroup,omitempty"`             // the assigned peer group of the user that is associated with this event
	SrcIPPeerGroup *string  `protobuf:"bytes,1009,opt,name=srcIPPeerGroup" json:"srcIPPeerGroup,omitempty"`   // the assigned peer group of the device that is associated with the authentication event
	DeviceType     *string  `protobuf:"bytes,1010,opt,name=deviceType" json:"deviceType,omitempty"`           // the device type that is associated with the authentication event
	HVE            *int32   `protobuf:"varint,1011,opt,name=HVE" json:"HVE,omitempty"`                        // the high-value entity value that is associated with the device
	BizProc        *string  `protobuf:"bytes,1012,opt,name=bizProc" json:"bizProc,omitempty"`                 // the business process that is associated with the device
	SrcNWSiteCode  *string  `protobuf:"bytes,1013,opt,name=srcNWSiteCode" json:"srcNWSiteCode,omitempty"`     // the site code that is associated with the source IP address
	SrcNWCountry   *string  `protobuf:"bytes,1014,opt,name=srcNWCountry" json:"srcNWCountry,omitempty"`       // the name of the country that is associated with the source IP address
	SrcNWRegion    *string  `protobuf:"bytes,1015,opt,name=srcNWRegion" json:"srcNWRegion,omitempty"`         // the region that is associated with the source IP address
	SrcNWCity      *string  `protobuf:"bytes,1016,opt,name=srcNWCity" json:"srcNWCity,omitempty"`             // the city that is associated with the source IP address
	SrcNWLatitude  *float64 `protobuf:"fixed64,1017,opt,name=srcNWLatitude" json:"srcNWLatitude,omitempty"`   // the latitude that is associated with the source IP address
	SrcNWLongitude *float64 `protobuf:"fixed64,1018,opt,name=srcNWLongitude" json:"srcNWLongitude,omitempty"` // the longitude that is associated with the source IP address
	SrcNWTzOffset  *int32   `protobuf:"varint,1019,opt,name=srcNWTzOffset" json:"srcNWTzOffset,omitempty"`    // the time zone offset that is associated with the source IP address
	SrcNWName      *string  `protobuf:"bytes,1020,opt,name=srcNWName" json:"srcNWName,omitempty"`             // the network name that is associated with the source IP address
	SrcNWType      *string  `protobuf:"bytes,1021,opt,name=srcNWType" json:"srcNWType,omitempty"`             // the network type that is associated with the source IP address
	SrcNWScope     *int32   `protobuf:"varint,1022,opt,name=srcNWScope" json:"srcNWScope,omitempty"`          // an integer that indicates whether network information could be associated with the source IP address
	UserPeerGroup  *string  `protobuf:"bytes,1023,opt,name=userPeerGroup" json:"userPeerGroup,omitempty"`     // the assigned peer group of the user that is associated with the source IP address
	UserHVE        *int32   `protobuf:"varint,1024,opt,name=userHVE" json:"userHVE,omitempty"`                // the high-value entity value for the user that is associated with the source IP address
	UserBizProc    *string  `protobuf:"bytes,1025,opt,name=userBizProc" json:"userBizProc,omitempty"`         // the business process for the user that is associated with the source IP address
	IsUserDevice   *int32   `protobuf:"varint,1026,opt,name=isUserDevice" json:"isUserDevice,omitempty"`      // a flag that indicates whether the device is a user device
}

func (x *AuthMsg) Reset() {
	*x = AuthMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Auth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMsg) ProtoMessage() {}

func (x *AuthMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Auth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMsg.ProtoReflect.Descriptor instead.
func (*AuthMsg) Descriptor() ([]byte, []int) {
	return file_Auth_proto_rawDescGZIP(), []int{0}
}

func (x *AuthMsg) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *AuthMsg) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *AuthMsg) GetFeedId() string {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return ""
}

func (x *AuthMsg) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *AuthMsg) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AuthMsg) GetSrcHostname() string {
	if x != nil && x.SrcHostname != nil {
		return *x.SrcHostname
	}
	return ""
}

func (x *AuthMsg) GetSrcIpAddress() string {
	if x != nil && x.SrcIpAddress != nil {
		return *x.SrcIpAddress
	}
	return ""
}

func (x *AuthMsg) GetDcHostname() string {
	if x != nil && x.DcHostname != nil {
		return *x.DcHostname
	}
	return ""
}

func (x *AuthMsg) GetDcIpAddress() string {
	if x != nil && x.DcIpAddress != nil {
		return *x.DcIpAddress
	}
	return ""
}

func (x *AuthMsg) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *AuthMsg) GetFailedReason() string {
	if x != nil && x.FailedReason != nil {
		return *x.FailedReason
	}
	return ""
}

func (x *AuthMsg) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *AuthMsg) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *AuthMsg) GetLname() string {
	if x != nil && x.Lname != nil {
		return *x.Lname
	}
	return ""
}

func (x *AuthMsg) GetFname() string {
	if x != nil && x.Fname != nil {
		return *x.Fname
	}
	return ""
}

func (x *AuthMsg) GetDivision() string {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return ""
}

func (x *AuthMsg) GetDepartment() string {
	if x != nil && x.Department != nil {
		return *x.Department
	}
	return ""
}

func (x *AuthMsg) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *AuthMsg) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *AuthMsg) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *AuthMsg) GetPeerGroup() string {
	if x != nil && x.PeerGroup != nil {
		return *x.PeerGroup
	}
	return ""
}

func (x *AuthMsg) GetSrcIPPeerGroup() string {
	if x != nil && x.SrcIPPeerGroup != nil {
		return *x.SrcIPPeerGroup
	}
	return ""
}

func (x *AuthMsg) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *AuthMsg) GetHVE() int32 {
	if x != nil && x.HVE != nil {
		return *x.HVE
	}
	return 0
}

func (x *AuthMsg) GetBizProc() string {
	if x != nil && x.BizProc != nil {
		return *x.BizProc
	}
	return ""
}

func (x *AuthMsg) GetSrcNWSiteCode() string {
	if x != nil && x.SrcNWSiteCode != nil {
		return *x.SrcNWSiteCode
	}
	return ""
}

func (x *AuthMsg) GetSrcNWCountry() string {
	if x != nil && x.SrcNWCountry != nil {
		return *x.SrcNWCountry
	}
	return ""
}

func (x *AuthMsg) GetSrcNWRegion() string {
	if x != nil && x.SrcNWRegion != nil {
		return *x.SrcNWRegion
	}
	return ""
}

func (x *AuthMsg) GetSrcNWCity() string {
	if x != nil && x.SrcNWCity != nil {
		return *x.SrcNWCity
	}
	return ""
}

func (x *AuthMsg) GetSrcNWLatitude() float64 {
	if x != nil && x.SrcNWLatitude != nil {
		return *x.SrcNWLatitude
	}
	return 0
}

func (x *AuthMsg) GetSrcNWLongitude() float64 {
	if x != nil && x.SrcNWLongitude != nil {
		return *x.SrcNWLongitude
	}
	return 0
}

func (x *AuthMsg) GetSrcNWTzOffset() int32 {
	if x != nil && x.SrcNWTzOffset != nil {
		return *x.SrcNWTzOffset
	}
	return 0
}

func (x *AuthMsg) GetSrcNWName() string {
	if x != nil && x.SrcNWName != nil {
		return *x.SrcNWName
	}
	return ""
}

func (x *AuthMsg) GetSrcNWType() string {
	if x != nil && x.SrcNWType != nil {
		return *x.SrcNWType
	}
	return ""
}

func (x *AuthMsg) GetSrcNWScope() int32 {
	if x != nil && x.SrcNWScope != nil {
		return *x.SrcNWScope
	}
	return 0
}

func (x *AuthMsg) GetUserPeerGroup() string {
	if x != nil && x.UserPeerGroup != nil {
		return *x.UserPeerGroup
	}
	return ""
}

func (x *AuthMsg) GetUserHVE() int32 {
	if x != nil && x.UserHVE != nil {
		return *x.UserHVE
	}
	return 0
}

func (x *AuthMsg) GetUserBizProc() string {
	if x != nil && x.UserBizProc != nil {
		return *x.UserBizProc
	}
	return ""
}

func (x *AuthMsg) GetIsUserDevice() int32 {
	if x != nil && x.IsUserDevice != nil {
		return *x.IsUserDevice
	}
	return 0
}

var File_Auth_proto protoreflect.FileDescriptor

var file_Auth_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x09, 0x0a,
	0x07, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x63, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x63, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x63, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x63, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x15, 0x0a, 0x05, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xeb, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xec, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x13, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xee,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50,
	0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf2,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x03, 0x48, 0x56, 0x45, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x48, 0x56, 0x45, 0x12, 0x19, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x18,
	0xf4, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12,
	0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x72, 0x63, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x73,
	0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x18, 0xf8, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a,
	0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xf9,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73,
	0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xfb,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x79, 0x70, 0x65,
	0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x48, 0x56, 0x45, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x48, 0x56, 0x45, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a,
	0x50, 0x72, 0x6f, 0x63, 0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x22, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x73, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x04, 0x41, 0x75, 0x74,
	0x68,
}

var (
	file_Auth_proto_rawDescOnce sync.Once
	file_Auth_proto_rawDescData = file_Auth_proto_rawDesc
)

func file_Auth_proto_rawDescGZIP() []byte {
	file_Auth_proto_rawDescOnce.Do(func() {
		file_Auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_Auth_proto_rawDescData)
	})
	return file_Auth_proto_rawDescData
}

var file_Auth_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_Auth_proto_goTypes = []interface{}{
	(*AuthMsg)(nil), // 0: AuthMsg
}
var file_Auth_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Auth_proto_init() }
func file_Auth_proto_init() {
	if File_Auth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Auth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Auth_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Auth_proto_goTypes,
		DependencyIndexes: file_Auth_proto_depIdxs,
		MessageInfos:      file_Auth_proto_msgTypes,
	}.Build()
	File_Auth_proto = out.File
	file_Auth_proto_rawDesc = nil
	file_Auth_proto_goTypes = nil
	file_Auth_proto_depIdxs = nil
}
