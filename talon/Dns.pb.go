// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.13.0
// source: Dns.proto

package talon

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DnsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId           *string  `protobuf:"bytes,1,opt,name=recordId" json:"recordId,omitempty"`                     // a unique identifier that is associated with each DNS event record
	Timestamp          *int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`                  // an integer that represents the date and time (in milliseconds) at which IngestServer received the DNS record
	FeedId             *string  `protobuf:"bytes,3,opt,name=feedId" json:"feedId,omitempty"`                         // a constant in every row that identifies the record type
	StartTime          *int64   `protobuf:"varint,4,opt,name=startTime" json:"startTime,omitempty"`                  // the date and time at which the DNS event started
	SrcIpAddress       *string  `protobuf:"bytes,5,opt,name=srcIpAddress" json:"srcIpAddress,omitempty"`             // the source IPv4 or IPv6 address that is associated with the DNS event
	DnsServerIpAddress *string  `protobuf:"bytes,6,opt,name=dnsServerIpAddress" json:"dnsServerIpAddress,omitempty"` // the IP address of the DNS server
	DnsServerPort      *int32   `protobuf:"varint,7,opt,name=dnsServerPort" json:"dnsServerPort,omitempty"`          // the DNS server port
	DnsQuery           *string  `protobuf:"bytes,8,opt,name=dnsQuery" json:"dnsQuery,omitempty"`                     // the DNS query
	DnsServerAction    *string  `protobuf:"bytes,9,opt,name=dnsServerAction" json:"dnsServerAction,omitempty"`       // the action that is taken by the DNS server
	DnsEventID         *int32   `protobuf:"varint,10,opt,name=dnsEventID" json:"dnsEventID,omitempty"`               // the Microsoft event identification that is associated with the DNS request
	EventStr           *string  `protobuf:"bytes,11,opt,name=eventStr" json:"eventStr,omitempty"`                    // the Microsoft event status that is associated with the DNS request
	Flags              *string  `protobuf:"bytes,12,opt,name=flags" json:"flags,omitempty"`                          // the query header flag that is associated with the DNS query request
	PacketData         *string  `protobuf:"bytes,13,opt,name=packetData" json:"packetData,omitempty"`                // the hexadecimal representation of the DNS event
	PolicyName         *string  `protobuf:"bytes,14,opt,name=policyName" json:"policyName,omitempty"`                // the policy name that is associated with naming the host
	QueryTypeId        *int32   `protobuf:"varint,15,opt,name=queryTypeId" json:"queryTypeId,omitempty"`             // the type of query that is associated with the DNS request
	QueryTypeStr       *string  `protobuf:"bytes,16,opt,name=queryTypeStr" json:"queryTypeStr,omitempty"`            // the type of query as a string that is associated with the DNS request
	Rcode              *int32   `protobuf:"varint,17,opt,name=rcode" json:"rcode,omitempty"`                         // the response code that is associated with the DNS request
	RcodeStr           *string  `protobuf:"bytes,18,opt,name=rcodeStr" json:"rcodeStr,omitempty"`                    // a short description of the response code that is associated with the DNS request
	Reason             *string  `protobuf:"bytes,19,opt,name=reason" json:"reason,omitempty"`                        // the long description of the response code that is associated with the DNS request
	FlagAA             *int32   `protobuf:"varint,20,opt,name=flagAA" json:"flagAA,omitempty"`                       // an integer (typically a Boolean) that represents whether the DNS event is an authoritative response
	FlagAD             *int32   `protobuf:"varint,21,opt,name=flagAD" json:"flagAD,omitempty"`                       // an integer (typically a Boolean) that represents whether the DNS event contains authenticated data
	FlagR              *int32   `protobuf:"varint,22,opt,name=flagR" json:"flagR,omitempty"`                         // an integer (typically a Boolean) that represents whether the DNS event is a response from the DNS server
	FlagRD             *int32   `protobuf:"varint,23,opt,name=flagRD" json:"flagRD,omitempty"`                       // an integer (typically a Boolean) that represents whether the DNS event requested recursion
	Scope              *string  `protobuf:"bytes,24,opt,name=scope" json:"scope,omitempty"`                          // a unique version of a zone that can be created inside an existing zone
	Zone               *string  `protobuf:"bytes,25,opt,name=zone" json:"zone,omitempty"`                            // the distinct, contiguous portion of the domain namespace that is associated with the response
	VendorName         *string  `protobuf:"bytes,26,opt,name=vendorName" json:"vendorName,omitempty"`                // the name of the vendor that is associated with the DNS event
	ProductVersion     *string  `protobuf:"bytes,27,opt,name=productVersion" json:"productVersion,omitempty"`        // the version of the product that is associated with the DNS event
	SrcIPUserId        *string  `protobuf:"bytes,1000,opt,name=srcIPUserId" json:"srcIPUserId,omitempty"`            // the unique identifier of the user that is associated with this event
	SrcIPDivision      *string  `protobuf:"bytes,1001,opt,name=srcIPDivision" json:"srcIPDivision,omitempty"`        // the division of the user that is associated with this event
	SrcIPDepartment    *string  `protobuf:"bytes,1002,opt,name=srcIPDepartment" json:"srcIPDepartment,omitempty"`    // the department of the user that is associated with this event
	SrcIPPeerGroup     *string  `protobuf:"bytes,1003,opt,name=srcIPPeerGroup" json:"srcIPPeerGroup,omitempty"`      // the assigned peer group of the user that is associated with the device
	SrcIPHVE           *int32   `protobuf:"varint,1004,opt,name=srcIPHVE" json:"srcIPHVE,omitempty"`                 // the high-value entity value that is associated with the device
	SrcIPBizProc       *string  `protobuf:"bytes,1005,opt,name=srcIPBizProc" json:"srcIPBizProc,omitempty"`          // the business process that is associated with the device
	SrcNWSiteCode      *string  `protobuf:"bytes,1006,opt,name=srcNWSiteCode" json:"srcNWSiteCode,omitempty"`        // the site code that is associated with the source IP address
	SrcNWCountry       *string  `protobuf:"bytes,1007,opt,name=srcNWCountry" json:"srcNWCountry,omitempty"`          // the name of the country that is associated with the source IP address
	SrcNWRegion        *string  `protobuf:"bytes,1008,opt,name=srcNWRegion" json:"srcNWRegion,omitempty"`            // the region that is associated with the source IP address
	SrcNWCity          *string  `protobuf:"bytes,1009,opt,name=srcNWCity" json:"srcNWCity,omitempty"`                // the city that is associated with the source IP address
	SrcNWLatitude      *float64 `protobuf:"fixed64,1010,opt,name=srcNWLatitude" json:"srcNWLatitude,omitempty"`      // the latitude that is associated with the source IP address
	SrcNWLongitude     *float64 `protobuf:"fixed64,1011,opt,name=srcNWLongitude" json:"srcNWLongitude,omitempty"`    // the longitude that is associated with the source IP address
	SrcNWTzOffset      *int32   `protobuf:"varint,1012,opt,name=srcNWTzOffset" json:"srcNWTzOffset,omitempty"`       // the time zone offset that is associated with the source IP address
	SrcNWName          *string  `protobuf:"bytes,1013,opt,name=srcNWName" json:"srcNWName,omitempty"`                // the network name that is associated with the source IP address
	SrcNWType          *string  `protobuf:"bytes,1014,opt,name=srcNWType" json:"srcNWType,omitempty"`                // the network type that is associated with the source IP address
	SrcNWScope         *int32   `protobuf:"varint,1015,opt,name=srcNWScope" json:"srcNWScope,omitempty"`             // an integer that indicates whether network information could be associated with the source IP address
	PeerGroup          *string  `protobuf:"bytes,1016,opt,name=peerGroup" json:"peerGroup,omitempty"`                // the assigned peer group of the user that is associated with this event
	UserPeerGroup      *string  `protobuf:"bytes,1017,opt,name=userPeerGroup" json:"userPeerGroup,omitempty"`        // the assigned peer group of the user that is associated with the source IP address
	UserHVE            *int32   `protobuf:"varint,1018,opt,name=userHVE" json:"userHVE,omitempty"`                   // the high-value entity value for the user that is associated with the source IP address
	UserBizProc        *string  `protobuf:"bytes,1019,opt,name=userBizProc" json:"userBizProc,omitempty"`            // the business process for the user that is associated with the source IP address
	IsUserDevice       *int32   `protobuf:"varint,1020,opt,name=isUserDevice" json:"isUserDevice,omitempty"`         // a flag that indicates whether the device is a user device
	UserFName          *string  `protobuf:"bytes,1021,opt,name=userFName" json:"userFName,omitempty"`                // the first name of the user that is associated with this event
	UserLName          *string  `protobuf:"bytes,1022,opt,name=userLName" json:"userLName,omitempty"`                // the last name of the user that is associated with this event
	UserCity           *string  `protobuf:"bytes,1023,opt,name=userCity" json:"userCity,omitempty"`                  // the city of the user that is associated with this event
	UserRegion         *string  `protobuf:"bytes,1024,opt,name=userRegion" json:"userRegion,omitempty"`              // the region of the user that is associated with this event
	UserCountry        *string  `protobuf:"bytes,1025,opt,name=userCountry" json:"userCountry,omitempty"`            // the country of the user that is associated with this event
}

func (x *DnsMsg) Reset() {
	*x = DnsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Dns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsMsg) ProtoMessage() {}

func (x *DnsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Dns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsMsg.ProtoReflect.Descriptor instead.
func (*DnsMsg) Descriptor() ([]byte, []int) {
	return file_Dns_proto_rawDescGZIP(), []int{0}
}

func (x *DnsMsg) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *DnsMsg) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *DnsMsg) GetFeedId() string {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return ""
}

func (x *DnsMsg) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *DnsMsg) GetSrcIpAddress() string {
	if x != nil && x.SrcIpAddress != nil {
		return *x.SrcIpAddress
	}
	return ""
}

func (x *DnsMsg) GetDnsServerIpAddress() string {
	if x != nil && x.DnsServerIpAddress != nil {
		return *x.DnsServerIpAddress
	}
	return ""
}

func (x *DnsMsg) GetDnsServerPort() int32 {
	if x != nil && x.DnsServerPort != nil {
		return *x.DnsServerPort
	}
	return 0
}

func (x *DnsMsg) GetDnsQuery() string {
	if x != nil && x.DnsQuery != nil {
		return *x.DnsQuery
	}
	return ""
}

func (x *DnsMsg) GetDnsServerAction() string {
	if x != nil && x.DnsServerAction != nil {
		return *x.DnsServerAction
	}
	return ""
}

func (x *DnsMsg) GetDnsEventID() int32 {
	if x != nil && x.DnsEventID != nil {
		return *x.DnsEventID
	}
	return 0
}

func (x *DnsMsg) GetEventStr() string {
	if x != nil && x.EventStr != nil {
		return *x.EventStr
	}
	return ""
}

func (x *DnsMsg) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *DnsMsg) GetPacketData() string {
	if x != nil && x.PacketData != nil {
		return *x.PacketData
	}
	return ""
}

func (x *DnsMsg) GetPolicyName() string {
	if x != nil && x.PolicyName != nil {
		return *x.PolicyName
	}
	return ""
}

func (x *DnsMsg) GetQueryTypeId() int32 {
	if x != nil && x.QueryTypeId != nil {
		return *x.QueryTypeId
	}
	return 0
}

func (x *DnsMsg) GetQueryTypeStr() string {
	if x != nil && x.QueryTypeStr != nil {
		return *x.QueryTypeStr
	}
	return ""
}

func (x *DnsMsg) GetRcode() int32 {
	if x != nil && x.Rcode != nil {
		return *x.Rcode
	}
	return 0
}

func (x *DnsMsg) GetRcodeStr() string {
	if x != nil && x.RcodeStr != nil {
		return *x.RcodeStr
	}
	return ""
}

func (x *DnsMsg) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *DnsMsg) GetFlagAA() int32 {
	if x != nil && x.FlagAA != nil {
		return *x.FlagAA
	}
	return 0
}

func (x *DnsMsg) GetFlagAD() int32 {
	if x != nil && x.FlagAD != nil {
		return *x.FlagAD
	}
	return 0
}

func (x *DnsMsg) GetFlagR() int32 {
	if x != nil && x.FlagR != nil {
		return *x.FlagR
	}
	return 0
}

func (x *DnsMsg) GetFlagRD() int32 {
	if x != nil && x.FlagRD != nil {
		return *x.FlagRD
	}
	return 0
}

func (x *DnsMsg) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *DnsMsg) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *DnsMsg) GetVendorName() string {
	if x != nil && x.VendorName != nil {
		return *x.VendorName
	}
	return ""
}

func (x *DnsMsg) GetProductVersion() string {
	if x != nil && x.ProductVersion != nil {
		return *x.ProductVersion
	}
	return ""
}

func (x *DnsMsg) GetSrcIPUserId() string {
	if x != nil && x.SrcIPUserId != nil {
		return *x.SrcIPUserId
	}
	return ""
}

func (x *DnsMsg) GetSrcIPDivision() string {
	if x != nil && x.SrcIPDivision != nil {
		return *x.SrcIPDivision
	}
	return ""
}

func (x *DnsMsg) GetSrcIPDepartment() string {
	if x != nil && x.SrcIPDepartment != nil {
		return *x.SrcIPDepartment
	}
	return ""
}

func (x *DnsMsg) GetSrcIPPeerGroup() string {
	if x != nil && x.SrcIPPeerGroup != nil {
		return *x.SrcIPPeerGroup
	}
	return ""
}

func (x *DnsMsg) GetSrcIPHVE() int32 {
	if x != nil && x.SrcIPHVE != nil {
		return *x.SrcIPHVE
	}
	return 0
}

func (x *DnsMsg) GetSrcIPBizProc() string {
	if x != nil && x.SrcIPBizProc != nil {
		return *x.SrcIPBizProc
	}
	return ""
}

func (x *DnsMsg) GetSrcNWSiteCode() string {
	if x != nil && x.SrcNWSiteCode != nil {
		return *x.SrcNWSiteCode
	}
	return ""
}

func (x *DnsMsg) GetSrcNWCountry() string {
	if x != nil && x.SrcNWCountry != nil {
		return *x.SrcNWCountry
	}
	return ""
}

func (x *DnsMsg) GetSrcNWRegion() string {
	if x != nil && x.SrcNWRegion != nil {
		return *x.SrcNWRegion
	}
	return ""
}

func (x *DnsMsg) GetSrcNWCity() string {
	if x != nil && x.SrcNWCity != nil {
		return *x.SrcNWCity
	}
	return ""
}

func (x *DnsMsg) GetSrcNWLatitude() float64 {
	if x != nil && x.SrcNWLatitude != nil {
		return *x.SrcNWLatitude
	}
	return 0
}

func (x *DnsMsg) GetSrcNWLongitude() float64 {
	if x != nil && x.SrcNWLongitude != nil {
		return *x.SrcNWLongitude
	}
	return 0
}

func (x *DnsMsg) GetSrcNWTzOffset() int32 {
	if x != nil && x.SrcNWTzOffset != nil {
		return *x.SrcNWTzOffset
	}
	return 0
}

func (x *DnsMsg) GetSrcNWName() string {
	if x != nil && x.SrcNWName != nil {
		return *x.SrcNWName
	}
	return ""
}

func (x *DnsMsg) GetSrcNWType() string {
	if x != nil && x.SrcNWType != nil {
		return *x.SrcNWType
	}
	return ""
}

func (x *DnsMsg) GetSrcNWScope() int32 {
	if x != nil && x.SrcNWScope != nil {
		return *x.SrcNWScope
	}
	return 0
}

func (x *DnsMsg) GetPeerGroup() string {
	if x != nil && x.PeerGroup != nil {
		return *x.PeerGroup
	}
	return ""
}

func (x *DnsMsg) GetUserPeerGroup() string {
	if x != nil && x.UserPeerGroup != nil {
		return *x.UserPeerGroup
	}
	return ""
}

func (x *DnsMsg) GetUserHVE() int32 {
	if x != nil && x.UserHVE != nil {
		return *x.UserHVE
	}
	return 0
}

func (x *DnsMsg) GetUserBizProc() string {
	if x != nil && x.UserBizProc != nil {
		return *x.UserBizProc
	}
	return ""
}

func (x *DnsMsg) GetIsUserDevice() int32 {
	if x != nil && x.IsUserDevice != nil {
		return *x.IsUserDevice
	}
	return 0
}

func (x *DnsMsg) GetUserFName() string {
	if x != nil && x.UserFName != nil {
		return *x.UserFName
	}
	return ""
}

func (x *DnsMsg) GetUserLName() string {
	if x != nil && x.UserLName != nil {
		return *x.UserLName
	}
	return ""
}

func (x *DnsMsg) GetUserCity() string {
	if x != nil && x.UserCity != nil {
		return *x.UserCity
	}
	return ""
}

func (x *DnsMsg) GetUserRegion() string {
	if x != nil && x.UserRegion != nil {
		return *x.UserRegion
	}
	return ""
}

func (x *DnsMsg) GetUserCountry() string {
	if x != nil && x.UserCountry != nil {
		return *x.UserCountry
	}
	return ""
}

var File_Dns_proto protoreflect.FileDescriptor

var file_Dns_proto_rawDesc = []byte{
	0x0a, 0x09, 0x44, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x0d, 0x0a, 0x06,
	0x44, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72,
	0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67,
	0x41, 0x41, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x41, 0x41,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x41, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x41, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x52, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x52, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x52, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x6c, 0x61, 0x67, 0x52, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x49,
	0x50, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x73,
	0x72, 0x63, 0x49, 0x50, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72,
	0x63, 0x49, 0x50, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0xeb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x48,
	0x56, 0x45, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50,
	0x48, 0x56, 0x45, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x50, 0x42, 0x69, 0x7a, 0x50,
	0x72, 0x6f, 0x63, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49,
	0x50, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e,
	0x57, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0xef, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x4e,
	0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57,
	0x43, 0x69, 0x74, 0x79, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63,
	0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0e, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0xf3, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54,
	0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73,
	0x72, 0x63, 0x4e, 0x57, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf9, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x48, 0x56, 0x45, 0x18, 0xfa, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x48, 0x56, 0x45, 0x12, 0x21, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x18, 0xfb, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63,
	0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x46,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18,
	0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x80,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x21, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x73, 0x2e,
	0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x03, 0x44, 0x6e, 0x73,
}

var (
	file_Dns_proto_rawDescOnce sync.Once
	file_Dns_proto_rawDescData = file_Dns_proto_rawDesc
)

func file_Dns_proto_rawDescGZIP() []byte {
	file_Dns_proto_rawDescOnce.Do(func() {
		file_Dns_proto_rawDescData = protoimpl.X.CompressGZIP(file_Dns_proto_rawDescData)
	})
	return file_Dns_proto_rawDescData
}

var file_Dns_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_Dns_proto_goTypes = []interface{}{
	(*DnsMsg)(nil), // 0: DnsMsg
}
var file_Dns_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Dns_proto_init() }
func file_Dns_proto_init() {
	if File_Dns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Dns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Dns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Dns_proto_goTypes,
		DependencyIndexes: file_Dns_proto_depIdxs,
		MessageInfos:      file_Dns_proto_msgTypes,
	}.Build()
	File_Dns_proto = out.File
	file_Dns_proto_rawDesc = nil
	file_Dns_proto_goTypes = nil
	file_Dns_proto_depIdxs = nil
}
