// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.13.0
// source: Epp.proto

package talon

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EppMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId           *string  `protobuf:"bytes,1,opt,name=recordId" json:"recordId,omitempty"`                      // a unique identifier that is associated with each endpoint protection event record
	Timestamp          *int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`                   // an integer that represents the date and time (in milliseconds) at which IngestServer received the endpoint protection record
	FeedId             *string  `protobuf:"bytes,3,opt,name=feedId" json:"feedId,omitempty"`                          // a constant in every row that identifies the record type
	StartTime          *int64   `protobuf:"varint,4,opt,name=startTime" json:"startTime,omitempty"`                   // the date and time at which the endpoint protection event started
	EndTime            *int64   `protobuf:"varint,5,opt,name=endTime" json:"endTime,omitempty"`                       // the date and time (in milliseconds) at which the endpoint protection event ended
	SrcIpAddress       *string  `protobuf:"bytes,6,opt,name=srcIpAddress" json:"srcIpAddress,omitempty"`              // the source IPv4 or IPv6 address that is associated with the endpoint protection event
	SrcMacAddress      *string  `protobuf:"bytes,7,opt,name=srcMacAddress" json:"srcMacAddress,omitempty"`            // the source media access control address that is associated with the endpoint protection event
	SrcHostname        *string  `protobuf:"bytes,8,opt,name=srcHostname" json:"srcHostname,omitempty"`                // the source host name that is associated with the endpoint protection event
	SrcDomain          *string  `protobuf:"bytes,9,opt,name=srcDomain" json:"srcDomain,omitempty"`                    // the source domain that is associated with the endpoint protection event
	DstIpAddress       *string  `protobuf:"bytes,10,opt,name=dstIpAddress" json:"dstIpAddress,omitempty"`             // the destination IPv4 or IPv6 address that is associated with the endpoint protection event
	DstHostname        *string  `protobuf:"bytes,11,opt,name=dstHostname" json:"dstHostname,omitempty"`               // the destination host name that is associated with the endpoint protection event
	UserId             *string  `protobuf:"bytes,12,opt,name=userId" json:"userId,omitempty"`                         // the unique identifier of the user that is associated with the endpoint protection event
	SrcPort            *int32   `protobuf:"varint,13,opt,name=srcPort" json:"srcPort,omitempty"`                      // the communication port that is associated with the source IP address
	DstPort            *int32   `protobuf:"varint,14,opt,name=dstPort" json:"dstPort,omitempty"`                      // the communication port that is associated with the destination IP address
	Occurrences        *int32   `protobuf:"varint,15,opt,name=occurrences" json:"occurrences,omitempty"`              // the number of times an activity occurred for a given endpoint protection event
	Network            *string  `protobuf:"bytes,16,opt,name=network" json:"network,omitempty"`                       // the label that represents a logical group of devices on the network. Defaults to 'N/A'
	Protocol           *int32   `protobuf:"varint,17,opt,name=protocol" json:"protocol,omitempty"`                    // the IP protocol type that is associated with the summarized data exchange. The value follows the specification defined by IANA.org.
	AppPath            *string  `protobuf:"bytes,18,opt,name=appPath" json:"appPath,omitempty"`                       // the directory path of the application that is associated with the endpoint protection event
	AppName            *string  `protobuf:"bytes,19,opt,name=appName" json:"appName,omitempty"`                       // the application name that is associated with the endpoint protection event
	AppHash            *string  `protobuf:"bytes,20,opt,name=appHash" json:"appHash,omitempty"`                       // the hash of the application that is associated with the endpoint protection event
	AppHashType        *string  `protobuf:"bytes,21,opt,name=appHashType" json:"appHashType,omitempty"`               // the type of hash that is applied
	AppCategory        *string  `protobuf:"bytes,22,opt,name=appCategory" json:"appCategory,omitempty"`               // the category of the application that is associated with the endpoint protection event
	AppType            *string  `protobuf:"bytes,23,opt,name=appType" json:"appType,omitempty"`                       // the type of application that is associated with the endpoint protection event
	AppFileSize        *int32   `protobuf:"varint,24,opt,name=appFileSize" json:"appFileSize,omitempty"`              // the file size of the application that is associated with the endpoint protection event
	ParentAppPath      *string  `protobuf:"bytes,25,opt,name=parentAppPath" json:"parentAppPath,omitempty"`           // the directory path of the parent application that calls the application associated with the endpoint protection event
	ParentAppName      *string  `protobuf:"bytes,26,opt,name=parentAppName" json:"parentAppName,omitempty"`           // the name of the parent application that calls the application associated with the endpoint protection event
	ParentAppHash      *string  `protobuf:"bytes,27,opt,name=parentAppHash" json:"parentAppHash,omitempty"`           // the MD5 hash of the parent application that calls the application associated with the endpoint protection event
	ParentCategory     *string  `protobuf:"bytes,28,opt,name=parentCategory" json:"parentCategory,omitempty"`         // the category of the parent application that calls the application associated with the endpoint protection event
	ParentAppType      *string  `protobuf:"bytes,29,opt,name=parentAppType" json:"parentAppType,omitempty"`           // the type of the parent application that calls the application associated with the endpoint protection event
	ParentAppFileSize  *int32   `protobuf:"varint,30,opt,name=parentAppFileSize" json:"parentAppFileSize,omitempty"`  // the file size of the parent application that calls the application associated with the endpoint protection event
	IdsEventTypeId     *int32   `protobuf:"varint,31,opt,name=idsEventTypeId" json:"idsEventTypeId,omitempty"`        // the event type identification of the intrusion that is detected in the endpoint protection event
	EventType          *string  `protobuf:"bytes,32,opt,name=eventType" json:"eventType,omitempty"`                   // the type of event, such as host-based intrusion detection system (HIDS), antivirus (AVM), or a status message (Status), that is associated with the endpoint protection event
	ThreatCategory     *string  `protobuf:"bytes,33,opt,name=threatCategory" json:"threatCategory,omitempty"`         // the threat category that is detected in the endpoint protection event
	ThreatCategoryType *string  `protobuf:"bytes,34,opt,name=threatCategoryType" json:"threatCategoryType,omitempty"` // the type of threat category that is detected in the endpoint protection event
	ThreatName         *string  `protobuf:"bytes,35,opt,name=threatName" json:"threatName,omitempty"`                 // the name of the threat that is detected in the endpoint protection event
	ThreatUrl          *string  `protobuf:"bytes,36,opt,name=threatUrl" json:"threatUrl,omitempty"`                   // the URL of the threat that is detected in the endpoint protection event
	ThreatPayloadUrl   *string  `protobuf:"bytes,37,opt,name=threatPayloadUrl" json:"threatPayloadUrl,omitempty"`     // the payload URL of the threat that is detected in the endpoint protection event
	ThreatSigId        *string  `protobuf:"bytes,38,opt,name=threatSigId" json:"threatSigId,omitempty"`               // the signature identification of the threat that is detected in the endpoint protection event
	ThreatSigSubId     *int32   `protobuf:"varint,39,opt,name=threatSigSubId" json:"threatSigSubId,omitempty"`        // the subsignature identification of the threat that is detected in the endpoint protection event
	Cve                *string  `protobuf:"bytes,40,opt,name=cve" json:"cve,omitempty"`                               // the published vulnerability of the threat that is detected in the endpoint protection event
	Disposition        *string  `protobuf:"bytes,41,opt,name=disposition" json:"disposition,omitempty"`               // a conditional or contextual statement that is associated with detection of the endpoint protection event
	DownloadSite       *string  `protobuf:"bytes,42,opt,name=downloadSite" json:"downloadSite,omitempty"`             // the URL of the location where the threat was downloaded
	DownloadedBy       *string  `protobuf:"bytes,43,opt,name=downloadedBy" json:"downloadedBy,omitempty"`             // the user that downloaded the threat
	Severity           *int32   `protobuf:"varint,44,opt,name=severity" json:"severity,omitempty"`                    // an integer that represents the severity of the endpoint protection event
	RequestedAction    *string  `protobuf:"bytes,45,opt,name=requestedAction" json:"requestedAction,omitempty"`       // the requested action that is associated with the threat or malware detected in the endpoint protection event
	ActualAction       *string  `protobuf:"bytes,46,opt,name=actualAction" json:"actualAction,omitempty"`             // the actual action that is performed in response to the threat or malware detected in the endpoint protection event
	SecondaryAction    *string  `protobuf:"bytes,47,opt,name=secondaryAction" json:"secondaryAction,omitempty"`       // the secondary action that is performed in response to the threat or malware detected in the endpoint protection event
	StatusMessage      *string  `protobuf:"bytes,48,opt,name=statusMessage" json:"statusMessage,omitempty"`           // the status of an operation that is associated with the endpoint protection event
	StatusType         *int32   `protobuf:"varint,49,opt,name=statusType" json:"statusType,omitempty"`                // the type of status that is associated with the endpoint protection event
	VendorName         *string  `protobuf:"bytes,50,opt,name=vendorName" json:"vendorName,omitempty"`                 // the name of the vendor that is associated with the endpoint protection event
	VendorVersion      *string  `protobuf:"bytes,51,opt,name=vendorVersion" json:"vendorVersion,omitempty"`           // the version of the vendor product that is associated with the endpoint protection event
	SrcIPUserId        *string  `protobuf:"bytes,1000,opt,name=srcIPUserId" json:"srcIPUserId,omitempty"`             // the unique identifier of the user that is associated with this event
	SrcIPDivision      *string  `protobuf:"bytes,1001,opt,name=srcIPDivision" json:"srcIPDivision,omitempty"`         // the division of the user that is associated with this event
	SrcIPDepartment    *string  `protobuf:"bytes,1002,opt,name=srcIPDepartment" json:"srcIPDepartment,omitempty"`     // the department of the user that is associated with this event
	SrcIPPeerGroup     *string  `protobuf:"bytes,1003,opt,name=srcIPPeerGroup" json:"srcIPPeerGroup,omitempty"`       // the assigned peer group of the user that is associated with the device
	SrcIPHVE           *int32   `protobuf:"varint,1004,opt,name=srcIPHVE" json:"srcIPHVE,omitempty"`                  // the high-value entity value that is associated with the device
	SrcIPBizProc       *string  `protobuf:"bytes,1005,opt,name=srcIPBizProc" json:"srcIPBizProc,omitempty"`           // the business process that is associated with the device
	SrcNWSiteCode      *string  `protobuf:"bytes,1006,opt,name=srcNWSiteCode" json:"srcNWSiteCode,omitempty"`         // the site code that is associated with the source IP address
	SrcNWCountry       *string  `protobuf:"bytes,1007,opt,name=srcNWCountry" json:"srcNWCountry,omitempty"`           // the name of the country that is associated with the source IP address
	SrcNWRegion        *string  `protobuf:"bytes,1008,opt,name=srcNWRegion" json:"srcNWRegion,omitempty"`             // the region that is associated with the source IP address
	SrcNWCity          *string  `protobuf:"bytes,1009,opt,name=srcNWCity" json:"srcNWCity,omitempty"`                 // the city that is associated with the source IP address
	SrcNWLatitude      *float64 `protobuf:"fixed64,1010,opt,name=srcNWLatitude" json:"srcNWLatitude,omitempty"`       // the latitude that is associated with the source IP address
	SrcNWLongitude     *float64 `protobuf:"fixed64,1011,opt,name=srcNWLongitude" json:"srcNWLongitude,omitempty"`     // the longitude that is associated with the source IP address
	SrcNWTzOffset      *int32   `protobuf:"varint,1012,opt,name=srcNWTzOffset" json:"srcNWTzOffset,omitempty"`        // the time zone offset that is associated with the source IP address
	SrcNWName          *string  `protobuf:"bytes,1013,opt,name=srcNWName" json:"srcNWName,omitempty"`                 // the network name that is associated with the source IP address
	SrcNWType          *string  `protobuf:"bytes,1014,opt,name=srcNWType" json:"srcNWType,omitempty"`                 // the network type that is associated with the source IP address
	SrcNWScope         *int32   `protobuf:"varint,1015,opt,name=srcNWScope" json:"srcNWScope,omitempty"`              // an integer that indicates whether network information could be associated with the source IP address
	DstTFScore         *float64 `protobuf:"fixed64,1016,opt,name=dstTFScore" json:"dstTFScore,omitempty"`             // the risk score of the destination IP address that is associated with the threat feed correlation
	DstTFLatitude      *float64 `protobuf:"fixed64,1017,opt,name=dstTFLatitude" json:"dstTFLatitude,omitempty"`       // the latitude of the destination IP address that is associated with the threat feed correlation
	DstTFLongitude     *float64 `protobuf:"fixed64,1018,opt,name=dstTFLongitude" json:"dstTFLongitude,omitempty"`     // the longitude of the destination IP address that is associated with the threat feed correlation
	DstTFCountry       *string  `protobuf:"bytes,1019,opt,name=dstTFCountry" json:"dstTFCountry,omitempty"`           // the country of the destination IP address that is associated with the threat feed correlation
	DstTFProtocol      *string  `protobuf:"bytes,1020,opt,name=dstTFProtocol" json:"dstTFProtocol,omitempty"`         // the protocol of the threat feed correlation that is associated with the destination IP address
	DstTFCategory      *string  `protobuf:"bytes,1021,opt,name=dstTFCategory" json:"dstTFCategory,omitempty"`         // the category of the threat feed correlation that is associated with the destination IP address
	DstTFHit           *int32   `protobuf:"varint,1022,opt,name=dstTFHit" json:"dstTFHit,omitempty"`                  // an integer that indicates whether a threat feed is associated with the destination IP address
	PeerGroup          *string  `protobuf:"bytes,1023,opt,name=peerGroup" json:"peerGroup,omitempty"`                 // the assigned peer group of the user that is associated with this event
	UserPeerGroup      *string  `protobuf:"bytes,1024,opt,name=userPeerGroup" json:"userPeerGroup,omitempty"`         // the assigned peer group of the user that is associated with the source IP address
	UserHVE            *int32   `protobuf:"varint,1025,opt,name=userHVE" json:"userHVE,omitempty"`                    // the high-value entity value for the user that is associated with the source IP address
	UserBizProc        *string  `protobuf:"bytes,1026,opt,name=userBizProc" json:"userBizProc,omitempty"`             // the business process for the user that is associated with the source IP address
	IsUserDevice       *int32   `protobuf:"varint,1027,opt,name=isUserDevice" json:"isUserDevice,omitempty"`          // a flag that indicates whether the device is a user device
	UserFName          *string  `protobuf:"bytes,1028,opt,name=userFName" json:"userFName,omitempty"`                 // the first name of the user that is associated with this event
	UserLName          *string  `protobuf:"bytes,1029,opt,name=userLName" json:"userLName,omitempty"`                 // the last name of the user that is associated with this event
	UserCity           *string  `protobuf:"bytes,1030,opt,name=userCity" json:"userCity,omitempty"`                   // the city of the user that is associated with this event
	UserRegion         *string  `protobuf:"bytes,1031,opt,name=userRegion" json:"userRegion,omitempty"`               // the region of the user that is associated with this event
	UserCountry        *string  `protobuf:"bytes,1032,opt,name=userCountry" json:"userCountry,omitempty"`             // the country of the user that is associated with this event
}

func (x *EppMsg) Reset() {
	*x = EppMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Epp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EppMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EppMsg) ProtoMessage() {}

func (x *EppMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Epp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EppMsg.ProtoReflect.Descriptor instead.
func (*EppMsg) Descriptor() ([]byte, []int) {
	return file_Epp_proto_rawDescGZIP(), []int{0}
}

func (x *EppMsg) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *EppMsg) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *EppMsg) GetFeedId() string {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return ""
}

func (x *EppMsg) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *EppMsg) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *EppMsg) GetSrcIpAddress() string {
	if x != nil && x.SrcIpAddress != nil {
		return *x.SrcIpAddress
	}
	return ""
}

func (x *EppMsg) GetSrcMacAddress() string {
	if x != nil && x.SrcMacAddress != nil {
		return *x.SrcMacAddress
	}
	return ""
}

func (x *EppMsg) GetSrcHostname() string {
	if x != nil && x.SrcHostname != nil {
		return *x.SrcHostname
	}
	return ""
}

func (x *EppMsg) GetSrcDomain() string {
	if x != nil && x.SrcDomain != nil {
		return *x.SrcDomain
	}
	return ""
}

func (x *EppMsg) GetDstIpAddress() string {
	if x != nil && x.DstIpAddress != nil {
		return *x.DstIpAddress
	}
	return ""
}

func (x *EppMsg) GetDstHostname() string {
	if x != nil && x.DstHostname != nil {
		return *x.DstHostname
	}
	return ""
}

func (x *EppMsg) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *EppMsg) GetSrcPort() int32 {
	if x != nil && x.SrcPort != nil {
		return *x.SrcPort
	}
	return 0
}

func (x *EppMsg) GetDstPort() int32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *EppMsg) GetOccurrences() int32 {
	if x != nil && x.Occurrences != nil {
		return *x.Occurrences
	}
	return 0
}

func (x *EppMsg) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *EppMsg) GetProtocol() int32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

func (x *EppMsg) GetAppPath() string {
	if x != nil && x.AppPath != nil {
		return *x.AppPath
	}
	return ""
}

func (x *EppMsg) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *EppMsg) GetAppHash() string {
	if x != nil && x.AppHash != nil {
		return *x.AppHash
	}
	return ""
}

func (x *EppMsg) GetAppHashType() string {
	if x != nil && x.AppHashType != nil {
		return *x.AppHashType
	}
	return ""
}

func (x *EppMsg) GetAppCategory() string {
	if x != nil && x.AppCategory != nil {
		return *x.AppCategory
	}
	return ""
}

func (x *EppMsg) GetAppType() string {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return ""
}

func (x *EppMsg) GetAppFileSize() int32 {
	if x != nil && x.AppFileSize != nil {
		return *x.AppFileSize
	}
	return 0
}

func (x *EppMsg) GetParentAppPath() string {
	if x != nil && x.ParentAppPath != nil {
		return *x.ParentAppPath
	}
	return ""
}

func (x *EppMsg) GetParentAppName() string {
	if x != nil && x.ParentAppName != nil {
		return *x.ParentAppName
	}
	return ""
}

func (x *EppMsg) GetParentAppHash() string {
	if x != nil && x.ParentAppHash != nil {
		return *x.ParentAppHash
	}
	return ""
}

func (x *EppMsg) GetParentCategory() string {
	if x != nil && x.ParentCategory != nil {
		return *x.ParentCategory
	}
	return ""
}

func (x *EppMsg) GetParentAppType() string {
	if x != nil && x.ParentAppType != nil {
		return *x.ParentAppType
	}
	return ""
}

func (x *EppMsg) GetParentAppFileSize() int32 {
	if x != nil && x.ParentAppFileSize != nil {
		return *x.ParentAppFileSize
	}
	return 0
}

func (x *EppMsg) GetIdsEventTypeId() int32 {
	if x != nil && x.IdsEventTypeId != nil {
		return *x.IdsEventTypeId
	}
	return 0
}

func (x *EppMsg) GetEventType() string {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return ""
}

func (x *EppMsg) GetThreatCategory() string {
	if x != nil && x.ThreatCategory != nil {
		return *x.ThreatCategory
	}
	return ""
}

func (x *EppMsg) GetThreatCategoryType() string {
	if x != nil && x.ThreatCategoryType != nil {
		return *x.ThreatCategoryType
	}
	return ""
}

func (x *EppMsg) GetThreatName() string {
	if x != nil && x.ThreatName != nil {
		return *x.ThreatName
	}
	return ""
}

func (x *EppMsg) GetThreatUrl() string {
	if x != nil && x.ThreatUrl != nil {
		return *x.ThreatUrl
	}
	return ""
}

func (x *EppMsg) GetThreatPayloadUrl() string {
	if x != nil && x.ThreatPayloadUrl != nil {
		return *x.ThreatPayloadUrl
	}
	return ""
}

func (x *EppMsg) GetThreatSigId() string {
	if x != nil && x.ThreatSigId != nil {
		return *x.ThreatSigId
	}
	return ""
}

func (x *EppMsg) GetThreatSigSubId() int32 {
	if x != nil && x.ThreatSigSubId != nil {
		return *x.ThreatSigSubId
	}
	return 0
}

func (x *EppMsg) GetCve() string {
	if x != nil && x.Cve != nil {
		return *x.Cve
	}
	return ""
}

func (x *EppMsg) GetDisposition() string {
	if x != nil && x.Disposition != nil {
		return *x.Disposition
	}
	return ""
}

func (x *EppMsg) GetDownloadSite() string {
	if x != nil && x.DownloadSite != nil {
		return *x.DownloadSite
	}
	return ""
}

func (x *EppMsg) GetDownloadedBy() string {
	if x != nil && x.DownloadedBy != nil {
		return *x.DownloadedBy
	}
	return ""
}

func (x *EppMsg) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return 0
}

func (x *EppMsg) GetRequestedAction() string {
	if x != nil && x.RequestedAction != nil {
		return *x.RequestedAction
	}
	return ""
}

func (x *EppMsg) GetActualAction() string {
	if x != nil && x.ActualAction != nil {
		return *x.ActualAction
	}
	return ""
}

func (x *EppMsg) GetSecondaryAction() string {
	if x != nil && x.SecondaryAction != nil {
		return *x.SecondaryAction
	}
	return ""
}

func (x *EppMsg) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

func (x *EppMsg) GetStatusType() int32 {
	if x != nil && x.StatusType != nil {
		return *x.StatusType
	}
	return 0
}

func (x *EppMsg) GetVendorName() string {
	if x != nil && x.VendorName != nil {
		return *x.VendorName
	}
	return ""
}

func (x *EppMsg) GetVendorVersion() string {
	if x != nil && x.VendorVersion != nil {
		return *x.VendorVersion
	}
	return ""
}

func (x *EppMsg) GetSrcIPUserId() string {
	if x != nil && x.SrcIPUserId != nil {
		return *x.SrcIPUserId
	}
	return ""
}

func (x *EppMsg) GetSrcIPDivision() string {
	if x != nil && x.SrcIPDivision != nil {
		return *x.SrcIPDivision
	}
	return ""
}

func (x *EppMsg) GetSrcIPDepartment() string {
	if x != nil && x.SrcIPDepartment != nil {
		return *x.SrcIPDepartment
	}
	return ""
}

func (x *EppMsg) GetSrcIPPeerGroup() string {
	if x != nil && x.SrcIPPeerGroup != nil {
		return *x.SrcIPPeerGroup
	}
	return ""
}

func (x *EppMsg) GetSrcIPHVE() int32 {
	if x != nil && x.SrcIPHVE != nil {
		return *x.SrcIPHVE
	}
	return 0
}

func (x *EppMsg) GetSrcIPBizProc() string {
	if x != nil && x.SrcIPBizProc != nil {
		return *x.SrcIPBizProc
	}
	return ""
}

func (x *EppMsg) GetSrcNWSiteCode() string {
	if x != nil && x.SrcNWSiteCode != nil {
		return *x.SrcNWSiteCode
	}
	return ""
}

func (x *EppMsg) GetSrcNWCountry() string {
	if x != nil && x.SrcNWCountry != nil {
		return *x.SrcNWCountry
	}
	return ""
}

func (x *EppMsg) GetSrcNWRegion() string {
	if x != nil && x.SrcNWRegion != nil {
		return *x.SrcNWRegion
	}
	return ""
}

func (x *EppMsg) GetSrcNWCity() string {
	if x != nil && x.SrcNWCity != nil {
		return *x.SrcNWCity
	}
	return ""
}

func (x *EppMsg) GetSrcNWLatitude() float64 {
	if x != nil && x.SrcNWLatitude != nil {
		return *x.SrcNWLatitude
	}
	return 0
}

func (x *EppMsg) GetSrcNWLongitude() float64 {
	if x != nil && x.SrcNWLongitude != nil {
		return *x.SrcNWLongitude
	}
	return 0
}

func (x *EppMsg) GetSrcNWTzOffset() int32 {
	if x != nil && x.SrcNWTzOffset != nil {
		return *x.SrcNWTzOffset
	}
	return 0
}

func (x *EppMsg) GetSrcNWName() string {
	if x != nil && x.SrcNWName != nil {
		return *x.SrcNWName
	}
	return ""
}

func (x *EppMsg) GetSrcNWType() string {
	if x != nil && x.SrcNWType != nil {
		return *x.SrcNWType
	}
	return ""
}

func (x *EppMsg) GetSrcNWScope() int32 {
	if x != nil && x.SrcNWScope != nil {
		return *x.SrcNWScope
	}
	return 0
}

func (x *EppMsg) GetDstTFScore() float64 {
	if x != nil && x.DstTFScore != nil {
		return *x.DstTFScore
	}
	return 0
}

func (x *EppMsg) GetDstTFLatitude() float64 {
	if x != nil && x.DstTFLatitude != nil {
		return *x.DstTFLatitude
	}
	return 0
}

func (x *EppMsg) GetDstTFLongitude() float64 {
	if x != nil && x.DstTFLongitude != nil {
		return *x.DstTFLongitude
	}
	return 0
}

func (x *EppMsg) GetDstTFCountry() string {
	if x != nil && x.DstTFCountry != nil {
		return *x.DstTFCountry
	}
	return ""
}

func (x *EppMsg) GetDstTFProtocol() string {
	if x != nil && x.DstTFProtocol != nil {
		return *x.DstTFProtocol
	}
	return ""
}

func (x *EppMsg) GetDstTFCategory() string {
	if x != nil && x.DstTFCategory != nil {
		return *x.DstTFCategory
	}
	return ""
}

func (x *EppMsg) GetDstTFHit() int32 {
	if x != nil && x.DstTFHit != nil {
		return *x.DstTFHit
	}
	return 0
}

func (x *EppMsg) GetPeerGroup() string {
	if x != nil && x.PeerGroup != nil {
		return *x.PeerGroup
	}
	return ""
}

func (x *EppMsg) GetUserPeerGroup() string {
	if x != nil && x.UserPeerGroup != nil {
		return *x.UserPeerGroup
	}
	return ""
}

func (x *EppMsg) GetUserHVE() int32 {
	if x != nil && x.UserHVE != nil {
		return *x.UserHVE
	}
	return 0
}

func (x *EppMsg) GetUserBizProc() string {
	if x != nil && x.UserBizProc != nil {
		return *x.UserBizProc
	}
	return ""
}

func (x *EppMsg) GetIsUserDevice() int32 {
	if x != nil && x.IsUserDevice != nil {
		return *x.IsUserDevice
	}
	return 0
}

func (x *EppMsg) GetUserFName() string {
	if x != nil && x.UserFName != nil {
		return *x.UserFName
	}
	return ""
}

func (x *EppMsg) GetUserLName() string {
	if x != nil && x.UserLName != nil {
		return *x.UserLName
	}
	return ""
}

func (x *EppMsg) GetUserCity() string {
	if x != nil && x.UserCity != nil {
		return *x.UserCity
	}
	return ""
}

func (x *EppMsg) GetUserRegion() string {
	if x != nil && x.UserRegion != nil {
		return *x.UserRegion
	}
	return ""
}

func (x *EppMsg) GetUserCountry() string {
	if x != nil && x.UserCountry != nil {
		return *x.UserCountry
	}
	return ""
}

var File_Epp_proto protoreflect.FileDescriptor

var file_Epp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x45, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x16, 0x0a, 0x06,
	0x45, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72,
	0x63, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x72, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x72, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x73,
	0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x64, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x74, 0x53, 0x69, 0x67, 0x49, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x74, 0x53, 0x69, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x74, 0x53, 0x69, 0x67, 0x53, 0x75, 0x62, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x53, 0x69, 0x67, 0x53, 0x75, 0x62,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x69, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0b, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x50,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x49,
	0x50, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xea, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72,
	0x63, 0x49, 0x50, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x08,
	0x73, 0x72, 0x63, 0x49, 0x50, 0x48, 0x56, 0x45, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x48, 0x56, 0x45, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63,
	0x49, 0x50, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x50, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x25,
	0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0xee, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72,
	0x63, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x72,
	0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0d,
	0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xf2, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x72,
	0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xf4, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x79, 0x70, 0x65, 0x18,
	0xf6, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0xf7, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x46, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x46, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x73, 0x74,
	0x54, 0x46, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x73,
	0x74, 0x54, 0x46, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xfa, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x54, 0x46, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x54, 0x46, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0xfb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x54,
	0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x54,
	0x46, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x54, 0x46, 0x48,
	0x69, 0x74, 0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x73, 0x74, 0x54, 0x46,
	0x48, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x48, 0x56, 0x45, 0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x48, 0x56, 0x45, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x50,
	0x72, 0x6f, 0x63, 0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x83, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x85, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18, 0x86, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x87, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x88, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x21, 0x0a, 0x1a, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x73, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x03, 0x45, 0x70, 0x70,
}

var (
	file_Epp_proto_rawDescOnce sync.Once
	file_Epp_proto_rawDescData = file_Epp_proto_rawDesc
)

func file_Epp_proto_rawDescGZIP() []byte {
	file_Epp_proto_rawDescOnce.Do(func() {
		file_Epp_proto_rawDescData = protoimpl.X.CompressGZIP(file_Epp_proto_rawDescData)
	})
	return file_Epp_proto_rawDescData
}

var file_Epp_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_Epp_proto_goTypes = []interface{}{
	(*EppMsg)(nil), // 0: EppMsg
}
var file_Epp_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Epp_proto_init() }
func file_Epp_proto_init() {
	if File_Epp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Epp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EppMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Epp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Epp_proto_goTypes,
		DependencyIndexes: file_Epp_proto_depIdxs,
		MessageInfos:      file_Epp_proto_msgTypes,
	}.Build()
	File_Epp_proto = out.File
	file_Epp_proto_rawDesc = nil
	file_Epp_proto_goTypes = nil
	file_Epp_proto_depIdxs = nil
}
