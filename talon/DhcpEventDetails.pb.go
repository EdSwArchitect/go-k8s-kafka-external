// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.13.0
// source: DhcpEventDetails.proto

package talon

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DhcpEventDetailsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId          *string  `protobuf:"bytes,1,opt,name=recordId" json:"recordId,omitempty"`                   // a unique identifier that is associated with each DHCP event record
	Timestamp         *int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`                // an integer that represents the date and time (in milliseconds) at which IngestServer received the DHCP record
	FeedId            *string  `protobuf:"bytes,3,opt,name=feedId" json:"feedId,omitempty"`                       // a constant in every row that identifies the record type
	StartTime         *int64   `protobuf:"varint,4,opt,name=startTime" json:"startTime,omitempty"`                // the date and time at which the DHCP event started
	LogServerHostname *string  `protobuf:"bytes,5,opt,name=logServerHostname" json:"logServerHostname,omitempty"` // the host name of the logging server
	EventTypeId       *int32   `protobuf:"varint,6,opt,name=eventTypeId" json:"eventTypeId,omitempty"`            // an integer that represents the type of DHCP event that occurred
	EventDescription  *string  `protobuf:"bytes,7,opt,name=eventDescription" json:"eventDescription,omitempty"`   // the short description of the type of DHCP event that occurred
	SrcIpAddress      *string  `protobuf:"bytes,8,opt,name=srcIpAddress" json:"srcIpAddress,omitempty"`           // the source IPv4 or IPv6 address that is associated with the DHCP event
	MacAddress        *string  `protobuf:"bytes,9,opt,name=macAddress" json:"macAddress,omitempty"`               // the media access control address that is associated with the DHCP event
	SrcHostname       *string  `protobuf:"bytes,10,opt,name=srcHostname" json:"srcHostname,omitempty"`            // the source host name that is associated with the DHCP event
	UserId            *string  `protobuf:"bytes,11,opt,name=userId" json:"userId,omitempty"`                      // the unique identifier of the user that is associated with the DHCP event
	VendorName        *string  `protobuf:"bytes,12,opt,name=vendorName" json:"vendorName,omitempty"`              // the name of the vendor that is associated with the DHCP event
	ProductVersion    *string  `protobuf:"bytes,13,opt,name=productVersion" json:"productVersion,omitempty"`      // the version of the product that is associated with the DHCP event
	SrcIPUserId       *string  `protobuf:"bytes,1000,opt,name=srcIPUserId" json:"srcIPUserId,omitempty"`          // the unique identifier of the user that is associated with this event
	SrcIPDivision     *string  `protobuf:"bytes,1001,opt,name=srcIPDivision" json:"srcIPDivision,omitempty"`      // the division of the user that is associated with this event
	SrcIPDepartment   *string  `protobuf:"bytes,1002,opt,name=srcIPDepartment" json:"srcIPDepartment,omitempty"`  // the department of the user that is associated with this event
	SrcIPPeerGroup    *string  `protobuf:"bytes,1003,opt,name=srcIPPeerGroup" json:"srcIPPeerGroup,omitempty"`    // the assigned peer group of the user that is associated with the device
	SrcIPHVE          *int32   `protobuf:"varint,1004,opt,name=srcIPHVE" json:"srcIPHVE,omitempty"`               // the high-value entity value that is associated with the device
	SrcIPBizProc      *string  `protobuf:"bytes,1005,opt,name=srcIPBizProc" json:"srcIPBizProc,omitempty"`        // the business process that is associated with the device
	SrcNWSiteCode     *string  `protobuf:"bytes,1006,opt,name=srcNWSiteCode" json:"srcNWSiteCode,omitempty"`      // the site code that is associated with the source IP address
	SrcNWCountry      *string  `protobuf:"bytes,1007,opt,name=srcNWCountry" json:"srcNWCountry,omitempty"`        // the name of the country that is associated with the source IP address
	SrcNWRegion       *string  `protobuf:"bytes,1008,opt,name=srcNWRegion" json:"srcNWRegion,omitempty"`          // the region that is associated with the source IP address
	SrcNWCity         *string  `protobuf:"bytes,1009,opt,name=srcNWCity" json:"srcNWCity,omitempty"`              // the city that is associated with the source IP address
	SrcNWLatitude     *float64 `protobuf:"fixed64,1010,opt,name=srcNWLatitude" json:"srcNWLatitude,omitempty"`    // the latitude that is associated with the source IP address
	SrcNWLongitude    *float64 `protobuf:"fixed64,1011,opt,name=srcNWLongitude" json:"srcNWLongitude,omitempty"`  // the longitude that is associated with the source IP address
	SrcNWTzOffset     *int32   `protobuf:"varint,1012,opt,name=srcNWTzOffset" json:"srcNWTzOffset,omitempty"`     // the time zone offset that is associated with the source IP address
	SrcNWName         *string  `protobuf:"bytes,1013,opt,name=srcNWName" json:"srcNWName,omitempty"`              // the network name that is associated with the source IP address
	SrcNWType         *string  `protobuf:"bytes,1014,opt,name=srcNWType" json:"srcNWType,omitempty"`              // the network type that is associated with the source IP address
	SrcNWScope        *int32   `protobuf:"varint,1015,opt,name=srcNWScope" json:"srcNWScope,omitempty"`           // an integer that indicates whether network information could be associated with the source IP address
	PeerGroup         *string  `protobuf:"bytes,1016,opt,name=peerGroup" json:"peerGroup,omitempty"`              // the assigned peer group of the user that is associated with this event
	UserPeerGroup     *string  `protobuf:"bytes,1017,opt,name=userPeerGroup" json:"userPeerGroup,omitempty"`      // the assigned peer group of the user that is associated with the source IP address
	UserHVE           *int32   `protobuf:"varint,1018,opt,name=userHVE" json:"userHVE,omitempty"`                 // the high-value entity value for the user that is associated with the source IP address
	UserBizProc       *string  `protobuf:"bytes,1019,opt,name=userBizProc" json:"userBizProc,omitempty"`          // the business process for the user that is associated with the source IP address
	IsUserDevice      *int32   `protobuf:"varint,1020,opt,name=isUserDevice" json:"isUserDevice,omitempty"`       // a flag that indicates whether the device is a user device
	UserFName         *string  `protobuf:"bytes,1021,opt,name=userFName" json:"userFName,omitempty"`              // the first name of the user that is associated with this event
	UserLName         *string  `protobuf:"bytes,1022,opt,name=userLName" json:"userLName,omitempty"`              // the last name of the user that is associated with this event
	UserCity          *string  `protobuf:"bytes,1023,opt,name=userCity" json:"userCity,omitempty"`                // the city of the user that is associated with this event
	UserRegion        *string  `protobuf:"bytes,1024,opt,name=userRegion" json:"userRegion,omitempty"`            // the region of the user that is associated with this event
	UserCountry       *string  `protobuf:"bytes,1025,opt,name=userCountry" json:"userCountry,omitempty"`          // the country of the user that is associated with this event
	EventId           *string  `protobuf:"bytes,2000,opt,name=eventId" json:"eventId,omitempty"`                  // the analytic event identifier
	AnomalousFlag     *int32   `protobuf:"varint,2001,opt,name=anomalousFlag" json:"anomalousFlag,omitempty"`     // an indicator of an anomamlous event
}

func (x *DhcpEventDetailsMsg) Reset() {
	*x = DhcpEventDetailsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DhcpEventDetails_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpEventDetailsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpEventDetailsMsg) ProtoMessage() {}

func (x *DhcpEventDetailsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_DhcpEventDetails_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpEventDetailsMsg.ProtoReflect.Descriptor instead.
func (*DhcpEventDetailsMsg) Descriptor() ([]byte, []int) {
	return file_DhcpEventDetails_proto_rawDescGZIP(), []int{0}
}

func (x *DhcpEventDetailsMsg) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetFeedId() string {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetLogServerHostname() string {
	if x != nil && x.LogServerHostname != nil {
		return *x.LogServerHostname
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetEventTypeId() int32 {
	if x != nil && x.EventTypeId != nil {
		return *x.EventTypeId
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetEventDescription() string {
	if x != nil && x.EventDescription != nil {
		return *x.EventDescription
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcIpAddress() string {
	if x != nil && x.SrcIpAddress != nil {
		return *x.SrcIpAddress
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcHostname() string {
	if x != nil && x.SrcHostname != nil {
		return *x.SrcHostname
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetVendorName() string {
	if x != nil && x.VendorName != nil {
		return *x.VendorName
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetProductVersion() string {
	if x != nil && x.ProductVersion != nil {
		return *x.ProductVersion
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcIPUserId() string {
	if x != nil && x.SrcIPUserId != nil {
		return *x.SrcIPUserId
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcIPDivision() string {
	if x != nil && x.SrcIPDivision != nil {
		return *x.SrcIPDivision
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcIPDepartment() string {
	if x != nil && x.SrcIPDepartment != nil {
		return *x.SrcIPDepartment
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcIPPeerGroup() string {
	if x != nil && x.SrcIPPeerGroup != nil {
		return *x.SrcIPPeerGroup
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcIPHVE() int32 {
	if x != nil && x.SrcIPHVE != nil {
		return *x.SrcIPHVE
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetSrcIPBizProc() string {
	if x != nil && x.SrcIPBizProc != nil {
		return *x.SrcIPBizProc
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcNWSiteCode() string {
	if x != nil && x.SrcNWSiteCode != nil {
		return *x.SrcNWSiteCode
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcNWCountry() string {
	if x != nil && x.SrcNWCountry != nil {
		return *x.SrcNWCountry
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcNWRegion() string {
	if x != nil && x.SrcNWRegion != nil {
		return *x.SrcNWRegion
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcNWCity() string {
	if x != nil && x.SrcNWCity != nil {
		return *x.SrcNWCity
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcNWLatitude() float64 {
	if x != nil && x.SrcNWLatitude != nil {
		return *x.SrcNWLatitude
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetSrcNWLongitude() float64 {
	if x != nil && x.SrcNWLongitude != nil {
		return *x.SrcNWLongitude
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetSrcNWTzOffset() int32 {
	if x != nil && x.SrcNWTzOffset != nil {
		return *x.SrcNWTzOffset
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetSrcNWName() string {
	if x != nil && x.SrcNWName != nil {
		return *x.SrcNWName
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcNWType() string {
	if x != nil && x.SrcNWType != nil {
		return *x.SrcNWType
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetSrcNWScope() int32 {
	if x != nil && x.SrcNWScope != nil {
		return *x.SrcNWScope
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetPeerGroup() string {
	if x != nil && x.PeerGroup != nil {
		return *x.PeerGroup
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetUserPeerGroup() string {
	if x != nil && x.UserPeerGroup != nil {
		return *x.UserPeerGroup
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetUserHVE() int32 {
	if x != nil && x.UserHVE != nil {
		return *x.UserHVE
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetUserBizProc() string {
	if x != nil && x.UserBizProc != nil {
		return *x.UserBizProc
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetIsUserDevice() int32 {
	if x != nil && x.IsUserDevice != nil {
		return *x.IsUserDevice
	}
	return 0
}

func (x *DhcpEventDetailsMsg) GetUserFName() string {
	if x != nil && x.UserFName != nil {
		return *x.UserFName
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetUserLName() string {
	if x != nil && x.UserLName != nil {
		return *x.UserLName
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetUserCity() string {
	if x != nil && x.UserCity != nil {
		return *x.UserCity
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetUserRegion() string {
	if x != nil && x.UserRegion != nil {
		return *x.UserRegion
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetUserCountry() string {
	if x != nil && x.UserCountry != nil {
		return *x.UserCountry
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *DhcpEventDetailsMsg) GetAnomalousFlag() int32 {
	if x != nil && x.AnomalousFlag != nil {
		return *x.AnomalousFlag
	}
	return 0
}

var File_DhcpEventDetails_proto protoreflect.FileDescriptor

var file_DhcpEventDetails_proto_rawDesc = []byte{
	0x0a, 0x16, 0x44, 0x68, 0x63, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x0b, 0x0a, 0x13, 0x44, 0x68, 0x63,
	0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65,
	0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x72, 0x63, 0x49, 0x50, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f,
	0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50,
	0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1b, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x48, 0x56, 0x45, 0x18, 0xec, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x50, 0x48, 0x56, 0x45, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x72, 0x63, 0x49, 0x50, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x18, 0xed, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x50, 0x42, 0x69, 0x7a, 0x50, 0x72,
	0x6f, 0x63, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e,
	0x57, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63,
	0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x0b, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf0, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x18, 0xf1,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x57,
	0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54,
	0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63,
	0x4e, 0x57, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54,
	0x79, 0x70, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e,
	0x57, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4e,
	0x57, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x48, 0x56, 0x45, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x48, 0x56, 0x45, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x18, 0xfb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xfd, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xfe, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x81, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x6f, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x6f, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67,
	0x42, 0x2e, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x73, 0x2e, 0x63, 0x79, 0x62, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x10,
	0x44, 0x68, 0x63, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
}

var (
	file_DhcpEventDetails_proto_rawDescOnce sync.Once
	file_DhcpEventDetails_proto_rawDescData = file_DhcpEventDetails_proto_rawDesc
)

func file_DhcpEventDetails_proto_rawDescGZIP() []byte {
	file_DhcpEventDetails_proto_rawDescOnce.Do(func() {
		file_DhcpEventDetails_proto_rawDescData = protoimpl.X.CompressGZIP(file_DhcpEventDetails_proto_rawDescData)
	})
	return file_DhcpEventDetails_proto_rawDescData
}

var file_DhcpEventDetails_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_DhcpEventDetails_proto_goTypes = []interface{}{
	(*DhcpEventDetailsMsg)(nil), // 0: DhcpEventDetailsMsg
}
var file_DhcpEventDetails_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_DhcpEventDetails_proto_init() }
func file_DhcpEventDetails_proto_init() {
	if File_DhcpEventDetails_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_DhcpEventDetails_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpEventDetailsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DhcpEventDetails_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DhcpEventDetails_proto_goTypes,
		DependencyIndexes: file_DhcpEventDetails_proto_depIdxs,
		MessageInfos:      file_DhcpEventDetails_proto_msgTypes,
	}.Build()
	File_DhcpEventDetails_proto = out.File
	file_DhcpEventDetails_proto_rawDesc = nil
	file_DhcpEventDetails_proto_goTypes = nil
	file_DhcpEventDetails_proto_depIdxs = nil
}
