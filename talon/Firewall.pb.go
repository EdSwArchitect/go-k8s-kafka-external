// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.13.0
// source: Firewall.proto

package talon

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FirewallMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId             *string  `protobuf:"bytes,1,opt,name=recordId" json:"recordId,omitempty"`                            // a unique identifier that is associated with each firewall event record
	Timestamp            *int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`                         // an integer that represents the date and time (in milliseconds) at which IngestServer received the authentication record
	FeedId               *string  `protobuf:"bytes,3,opt,name=feedId" json:"feedId,omitempty"`                                // a constant in every row that identifies the record type
	MessageId            *string  `protobuf:"bytes,4,opt,name=messageId" json:"messageId,omitempty"`                          // an identifier for the firewall message
	StartTime            *int64   `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"`                         // the date and time at which an individual firewall record started
	SrcIpAddress         *string  `protobuf:"bytes,6,opt,name=srcIpAddress" json:"srcIpAddress,omitempty"`                    // the source IPv4 address that is associated with the firewall event
	DstIpAddress         *string  `protobuf:"bytes,7,opt,name=dstIpAddress" json:"dstIpAddress,omitempty"`                    // the destination IPv4 address that is associated with the firewall event
	SrcPort              *int32   `protobuf:"varint,8,opt,name=srcPort" json:"srcPort,omitempty"`                             // the port that is associated with the source IP address of the firewall event
	SrcInterfaceName     *string  `protobuf:"bytes,9,opt,name=srcInterfaceName" json:"srcInterfaceName,omitempty"`            // the name of the interface that is associated with the source IP address of the firewall event
	DstPort              *int32   `protobuf:"varint,10,opt,name=dstPort" json:"dstPort,omitempty"`                            // the port that is associated with the destination IP address of the firewall event
	DstInterfaceName     *string  `protobuf:"bytes,11,opt,name=dstInterfaceName" json:"dstInterfaceName,omitempty"`           // the name of the interface that is associated with destination IP address of the firewall event
	ProtocolNum          *int32   `protobuf:"varint,12,opt,name=protocolNum" json:"protocolNum,omitempty"`                    // the protocol that is detected in the firewall event
	AclID                *string  `protobuf:"bytes,13,opt,name=aclID" json:"aclID,omitempty"`                                 // the firewall access control list identifier
	AclAction            *string  `protobuf:"bytes,14,opt,name=aclAction" json:"aclAction,omitempty"`                         // the action that is taken by the firewall
	VendorName           *string  `protobuf:"bytes,15,opt,name=vendorName" json:"vendorName,omitempty"`                       // the firewall vendor name
	ProductVersion       *string  `protobuf:"bytes,16,opt,name=productVersion" json:"productVersion,omitempty"`               // the firewall product version
	SrcNWSiteCode        *string  `protobuf:"bytes,1000,opt,name=srcNWSiteCode" json:"srcNWSiteCode,omitempty"`               // the site code that is associated with the source IP address
	SrcNWCountry         *string  `protobuf:"bytes,1001,opt,name=srcNWCountry" json:"srcNWCountry,omitempty"`                 // the name of the country that is associated with the source IP address
	SrcNWRegion          *string  `protobuf:"bytes,1002,opt,name=srcNWRegion" json:"srcNWRegion,omitempty"`                   // the region that is associated with the source IP address
	SrcNWCity            *string  `protobuf:"bytes,1003,opt,name=srcNWCity" json:"srcNWCity,omitempty"`                       // the city that is associated with the source IP address
	SrcNWLatitude        *float64 `protobuf:"fixed64,1004,opt,name=srcNWLatitude" json:"srcNWLatitude,omitempty"`             // the latitude that is associated with the source IP address
	SrcNWLongitude       *float64 `protobuf:"fixed64,1005,opt,name=srcNWLongitude" json:"srcNWLongitude,omitempty"`           // the longitude that is associated with the source IP address
	SrcNWTzOffset        *int32   `protobuf:"varint,1006,opt,name=srcNWTzOffset" json:"srcNWTzOffset,omitempty"`              // the time zone offset that is associated with the source IP address
	SrcNWName            *string  `protobuf:"bytes,1007,opt,name=srcNWName" json:"srcNWName,omitempty"`                       // the network name that is associated with the source IP address
	SrcNWType            *string  `protobuf:"bytes,1008,opt,name=srcNWType" json:"srcNWType,omitempty"`                       // the network type that is associated with the source IP address
	SrcNWScope           *int32   `protobuf:"varint,1009,opt,name=srcNWScope" json:"srcNWScope,omitempty"`                    // an integer that indicates whether network information could be associated with the source IP address
	DstNWSiteCode        *string  `protobuf:"bytes,1010,opt,name=dstNWSiteCode" json:"dstNWSiteCode,omitempty"`               // the site code that is associated with the destination IP address
	DstNWCountry         *string  `protobuf:"bytes,1011,opt,name=dstNWCountry" json:"dstNWCountry,omitempty"`                 // the name of the country that is associated with the destination IP address
	DstNWRegion          *string  `protobuf:"bytes,1012,opt,name=dstNWRegion" json:"dstNWRegion,omitempty"`                   // the region that is associated with the destination IP address
	DstNWCity            *string  `protobuf:"bytes,1013,opt,name=dstNWCity" json:"dstNWCity,omitempty"`                       // the city that is associated with the destination IP address
	DstNWLatitude        *float64 `protobuf:"fixed64,1014,opt,name=dstNWLatitude" json:"dstNWLatitude,omitempty"`             // the latitude that is associated with the destination IP address
	DstNWLongitude       *float64 `protobuf:"fixed64,1015,opt,name=dstNWLongitude" json:"dstNWLongitude,omitempty"`           // the longitude that is associated with the destination IP address
	DstNWTzOffset        *int32   `protobuf:"varint,1016,opt,name=dstNWTzOffset" json:"dstNWTzOffset,omitempty"`              // the time zone offset that is associated with the destination IP address
	DstNWName            *string  `protobuf:"bytes,1017,opt,name=dstNWName" json:"dstNWName,omitempty"`                       // the network name that is associated with the destination IP address
	DstNWType            *string  `protobuf:"bytes,1018,opt,name=dstNWType" json:"dstNWType,omitempty"`                       // the network type that is associated with the destination IP address
	DstNWScope           *int32   `protobuf:"varint,1019,opt,name=dstNWScope" json:"dstNWScope,omitempty"`                    // an integer that indicates whether network information could be associated with the destination IP address
	SrcDNHostname        *string  `protobuf:"bytes,1020,opt,name=srcDNHostname" json:"srcDNHostname,omitempty"`               // the host name that is associated with the source IP address
	DstDNHostname        *string  `protobuf:"bytes,1021,opt,name=dstDNHostname" json:"dstDNHostname,omitempty"`               // the host name that is associated with the destination IP address
	SrcDHMacAddress      *string  `protobuf:"bytes,1022,opt,name=srcDHMacAddress" json:"srcDHMacAddress,omitempty"`           // the media access control address that is associated with the source IP address
	DstDHMacAddress      *string  `protobuf:"bytes,1023,opt,name=dstDHMacAddress" json:"dstDHMacAddress,omitempty"`           // the media access control address that is associated with the destination IP address
	SrcIPUserId          *string  `protobuf:"bytes,1024,opt,name=srcIPUserId" json:"srcIPUserId,omitempty"`                   // the unique identifier of the user that is associated with this event
	SrcIPDivision        *string  `protobuf:"bytes,1025,opt,name=srcIPDivision" json:"srcIPDivision,omitempty"`               // the division of the user that is associated with this event
	SrcIPDepartment      *string  `protobuf:"bytes,1026,opt,name=srcIPDepartment" json:"srcIPDepartment,omitempty"`           // the department of the user that is associated with this event
	SrcIPPeerGroup       *string  `protobuf:"bytes,1027,opt,name=srcIPPeerGroup" json:"srcIPPeerGroup,omitempty"`             // the assigned peer group of the user that is associated with the device
	SrcIPHVE             *int32   `protobuf:"varint,1028,opt,name=srcIPHVE" json:"srcIPHVE,omitempty"`                        // the high-value entity value that is associated with the device
	SrcIPBizProc         *string  `protobuf:"bytes,1029,opt,name=srcIPBizProc" json:"srcIPBizProc,omitempty"`                 // the business process that is associated with the device
	SrcIPUserPeerGroup   *string  `protobuf:"bytes,1030,opt,name=srcIPUserPeerGroup" json:"srcIPUserPeerGroup,omitempty"`     // the assigned peer group of the user that is associated with the source IP address
	SrcIPDevicePeerGroup *string  `protobuf:"bytes,1031,opt,name=srcIPDevicePeerGroup" json:"srcIPDevicePeerGroup,omitempty"` // the peer group that is associated with the source IP address
	SrcIPUserHVE         *int32   `protobuf:"varint,1032,opt,name=srcIPUserHVE" json:"srcIPUserHVE,omitempty"`                // the high-value entity value of the user that is associated with the source IP address
	SrcIPUserBizProc     *string  `protobuf:"bytes,1033,opt,name=srcIPUserBizProc" json:"srcIPUserBizProc,omitempty"`         // the business process for the user that is associated with the source IP address
	SrcIPUserFName       *string  `protobuf:"bytes,1034,opt,name=srcIPUserFName" json:"srcIPUserFName,omitempty"`             // the first name of the user that is associated with the source IP address
	SrcIPUserLName       *string  `protobuf:"bytes,1035,opt,name=srcIPUserLName" json:"srcIPUserLName,omitempty"`             // the last name of the user that is associated with the source IP address
	SrcIPUserCity        *string  `protobuf:"bytes,1036,opt,name=srcIPUserCity" json:"srcIPUserCity,omitempty"`               // the city of the user that is associated with the source IP address
	SrcIPUserRegion      *string  `protobuf:"bytes,1037,opt,name=srcIPUserRegion" json:"srcIPUserRegion,omitempty"`           // the region of the user that is associated with the source IP address
	SrcIPUserCountry     *string  `protobuf:"bytes,1038,opt,name=srcIPUserCountry" json:"srcIPUserCountry,omitempty"`         // the country of the user that is associated with the source IP address
	SrcIPIsUserDevice    *int32   `protobuf:"varint,1039,opt,name=srcIPIsUserDevice" json:"srcIPIsUserDevice,omitempty"`      // a flag that indicates whether the device that is associated with the source IP address is a user device
	DstIPUserId          *string  `protobuf:"bytes,1040,opt,name=dstIPUserId" json:"dstIPUserId,omitempty"`                   // the user ID that is associated with the destination IP address
	DstIPDivision        *string  `protobuf:"bytes,1041,opt,name=dstIPDivision" json:"dstIPDivision,omitempty"`               // the division that is associated with the destination IP address
	DstIPDepartment      *string  `protobuf:"bytes,1042,opt,name=dstIPDepartment" json:"dstIPDepartment,omitempty"`           // the department that is associated with the destination IP address
	DstIPPeerGroup       *string  `protobuf:"bytes,1043,opt,name=dstIPPeerGroup" json:"dstIPPeerGroup,omitempty"`             // the peer group that is associated with the destination end of the event
	DstIPUserPeerGroup   *string  `protobuf:"bytes,1044,opt,name=dstIPUserPeerGroup" json:"dstIPUserPeerGroup,omitempty"`     // the assigned peer group of the user that is associated with the destination IP address
	DstIPDevicePeerGroup *string  `protobuf:"bytes,1045,opt,name=dstIPDevicePeerGroup" json:"dstIPDevicePeerGroup,omitempty"` // the peer group that is associated with the destination IP address
	DstIPHVE             *int32   `protobuf:"varint,1046,opt,name=dstIPHVE" json:"dstIPHVE,omitempty"`                        // the high-value entity value that is associated with the destination IP address
	DstIPUserHVE         *int32   `protobuf:"varint,1047,opt,name=dstIPUserHVE" json:"dstIPUserHVE,omitempty"`                // the high-value entity value of the user that is associated with the destination IP address
	DstIPBizProc         *string  `protobuf:"bytes,1048,opt,name=dstIPBizProc" json:"dstIPBizProc,omitempty"`                 // the business process that is associated with the destination IP address
	DstIPUserBizProc     *string  `protobuf:"bytes,1049,opt,name=dstIPUserBizProc" json:"dstIPUserBizProc,omitempty"`         // the business process of the user that is associated with the destination IP address
	DstIPUserFName       *string  `protobuf:"bytes,1050,opt,name=dstIPUserFName" json:"dstIPUserFName,omitempty"`             // the first name of the user that is associated with the destination IP address
	DstIPUserLName       *string  `protobuf:"bytes,1051,opt,name=dstIPUserLName" json:"dstIPUserLName,omitempty"`             // the last name of the user that is associated with the destination IP address
	DstIPUserCity        *string  `protobuf:"bytes,1052,opt,name=dstIPUserCity" json:"dstIPUserCity,omitempty"`               // the city of the user that is associated with the destination IP address
	DstIPUserRegion      *string  `protobuf:"bytes,1053,opt,name=dstIPUserRegion" json:"dstIPUserRegion,omitempty"`           // the region of the user that is associated with the destination IP address
	DstIPUserCountry     *string  `protobuf:"bytes,1054,opt,name=dstIPUserCountry" json:"dstIPUserCountry,omitempty"`         // the country of the user that is associated with the destination IP address
	DstIPIsUserDevice    *int32   `protobuf:"varint,1055,opt,name=dstIPIsUserDevice" json:"dstIPIsUserDevice,omitempty"`      // a flag that indicates whether the device of the user that is associated with the destination IP address is a user device
	SrcTFScore           *float64 `protobuf:"fixed64,1056,opt,name=srcTFScore" json:"srcTFScore,omitempty"`                   // the risk score of the source IP address that is associated with the threat feed correlation
	SrcTFLatitude        *float64 `protobuf:"fixed64,1057,opt,name=srcTFLatitude" json:"srcTFLatitude,omitempty"`             // the latitude of the source IP address that is associated with the threat feed correlation
	SrcTFLongitude       *float64 `protobuf:"fixed64,1058,opt,name=srcTFLongitude" json:"srcTFLongitude,omitempty"`           // the longitude of the source IP address that is associated with the threat feed correlation
	SrcTFCountry         *string  `protobuf:"bytes,1059,opt,name=srcTFCountry" json:"srcTFCountry,omitempty"`                 // the country of the source IP address that is associated with the threat feed correlation
	SrcTFProtocol        *string  `protobuf:"bytes,1060,opt,name=srcTFProtocol" json:"srcTFProtocol,omitempty"`               // the protocol of the threat feed correlation that is associated with the source IP address
	SrcTFCategory        *string  `protobuf:"bytes,1061,opt,name=srcTFCategory" json:"srcTFCategory,omitempty"`               // the category of the threat feed correlation that is associated with the source IP address
	SrcTFHit             *int32   `protobuf:"varint,1062,opt,name=srcTFHit" json:"srcTFHit,omitempty"`                        // an integer that indicated whether a threat feed is associated with the destination IP address
	DstTFScore           *float64 `protobuf:"fixed64,1063,opt,name=dstTFScore" json:"dstTFScore,omitempty"`                   // the risk score of the destination IP address that is associated with the threat feed correlation
	DstTFLatitude        *float64 `protobuf:"fixed64,1064,opt,name=dstTFLatitude" json:"dstTFLatitude,omitempty"`             // the latitude of the destination IP address that is associated with the threat feed correlation
	DstTFLongitude       *float64 `protobuf:"fixed64,1065,opt,name=dstTFLongitude" json:"dstTFLongitude,omitempty"`           // the longitude of the destination IP address that is associated with the threat feed correlation
	DstTFCountry         *string  `protobuf:"bytes,1066,opt,name=dstTFCountry" json:"dstTFCountry,omitempty"`                 // the country of the destination IP address that is associated with the threat feed correlation
	DstTFProtocol        *string  `protobuf:"bytes,1067,opt,name=dstTFProtocol" json:"dstTFProtocol,omitempty"`               // the protocol of the threat feed correlation that is associated with the destination IP address
	DstTFCategory        *string  `protobuf:"bytes,1068,opt,name=dstTFCategory" json:"dstTFCategory,omitempty"`               // the category of the threat feed correlation that is associated with the destination IP address
	DstTFHit             *int32   `protobuf:"varint,1069,opt,name=dstTFHit" json:"dstTFHit,omitempty"`                        // an integer that indicates whether a threat feed is associated with the destination IP address
}

func (x *FirewallMsg) Reset() {
	*x = FirewallMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Firewall_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallMsg) ProtoMessage() {}

func (x *FirewallMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Firewall_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallMsg.ProtoReflect.Descriptor instead.
func (*FirewallMsg) Descriptor() ([]byte, []int) {
	return file_Firewall_proto_rawDescGZIP(), []int{0}
}

func (x *FirewallMsg) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *FirewallMsg) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *FirewallMsg) GetFeedId() string {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return ""
}

func (x *FirewallMsg) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *FirewallMsg) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *FirewallMsg) GetSrcIpAddress() string {
	if x != nil && x.SrcIpAddress != nil {
		return *x.SrcIpAddress
	}
	return ""
}

func (x *FirewallMsg) GetDstIpAddress() string {
	if x != nil && x.DstIpAddress != nil {
		return *x.DstIpAddress
	}
	return ""
}

func (x *FirewallMsg) GetSrcPort() int32 {
	if x != nil && x.SrcPort != nil {
		return *x.SrcPort
	}
	return 0
}

func (x *FirewallMsg) GetSrcInterfaceName() string {
	if x != nil && x.SrcInterfaceName != nil {
		return *x.SrcInterfaceName
	}
	return ""
}

func (x *FirewallMsg) GetDstPort() int32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *FirewallMsg) GetDstInterfaceName() string {
	if x != nil && x.DstInterfaceName != nil {
		return *x.DstInterfaceName
	}
	return ""
}

func (x *FirewallMsg) GetProtocolNum() int32 {
	if x != nil && x.ProtocolNum != nil {
		return *x.ProtocolNum
	}
	return 0
}

func (x *FirewallMsg) GetAclID() string {
	if x != nil && x.AclID != nil {
		return *x.AclID
	}
	return ""
}

func (x *FirewallMsg) GetAclAction() string {
	if x != nil && x.AclAction != nil {
		return *x.AclAction
	}
	return ""
}

func (x *FirewallMsg) GetVendorName() string {
	if x != nil && x.VendorName != nil {
		return *x.VendorName
	}
	return ""
}

func (x *FirewallMsg) GetProductVersion() string {
	if x != nil && x.ProductVersion != nil {
		return *x.ProductVersion
	}
	return ""
}

func (x *FirewallMsg) GetSrcNWSiteCode() string {
	if x != nil && x.SrcNWSiteCode != nil {
		return *x.SrcNWSiteCode
	}
	return ""
}

func (x *FirewallMsg) GetSrcNWCountry() string {
	if x != nil && x.SrcNWCountry != nil {
		return *x.SrcNWCountry
	}
	return ""
}

func (x *FirewallMsg) GetSrcNWRegion() string {
	if x != nil && x.SrcNWRegion != nil {
		return *x.SrcNWRegion
	}
	return ""
}

func (x *FirewallMsg) GetSrcNWCity() string {
	if x != nil && x.SrcNWCity != nil {
		return *x.SrcNWCity
	}
	return ""
}

func (x *FirewallMsg) GetSrcNWLatitude() float64 {
	if x != nil && x.SrcNWLatitude != nil {
		return *x.SrcNWLatitude
	}
	return 0
}

func (x *FirewallMsg) GetSrcNWLongitude() float64 {
	if x != nil && x.SrcNWLongitude != nil {
		return *x.SrcNWLongitude
	}
	return 0
}

func (x *FirewallMsg) GetSrcNWTzOffset() int32 {
	if x != nil && x.SrcNWTzOffset != nil {
		return *x.SrcNWTzOffset
	}
	return 0
}

func (x *FirewallMsg) GetSrcNWName() string {
	if x != nil && x.SrcNWName != nil {
		return *x.SrcNWName
	}
	return ""
}

func (x *FirewallMsg) GetSrcNWType() string {
	if x != nil && x.SrcNWType != nil {
		return *x.SrcNWType
	}
	return ""
}

func (x *FirewallMsg) GetSrcNWScope() int32 {
	if x != nil && x.SrcNWScope != nil {
		return *x.SrcNWScope
	}
	return 0
}

func (x *FirewallMsg) GetDstNWSiteCode() string {
	if x != nil && x.DstNWSiteCode != nil {
		return *x.DstNWSiteCode
	}
	return ""
}

func (x *FirewallMsg) GetDstNWCountry() string {
	if x != nil && x.DstNWCountry != nil {
		return *x.DstNWCountry
	}
	return ""
}

func (x *FirewallMsg) GetDstNWRegion() string {
	if x != nil && x.DstNWRegion != nil {
		return *x.DstNWRegion
	}
	return ""
}

func (x *FirewallMsg) GetDstNWCity() string {
	if x != nil && x.DstNWCity != nil {
		return *x.DstNWCity
	}
	return ""
}

func (x *FirewallMsg) GetDstNWLatitude() float64 {
	if x != nil && x.DstNWLatitude != nil {
		return *x.DstNWLatitude
	}
	return 0
}

func (x *FirewallMsg) GetDstNWLongitude() float64 {
	if x != nil && x.DstNWLongitude != nil {
		return *x.DstNWLongitude
	}
	return 0
}

func (x *FirewallMsg) GetDstNWTzOffset() int32 {
	if x != nil && x.DstNWTzOffset != nil {
		return *x.DstNWTzOffset
	}
	return 0
}

func (x *FirewallMsg) GetDstNWName() string {
	if x != nil && x.DstNWName != nil {
		return *x.DstNWName
	}
	return ""
}

func (x *FirewallMsg) GetDstNWType() string {
	if x != nil && x.DstNWType != nil {
		return *x.DstNWType
	}
	return ""
}

func (x *FirewallMsg) GetDstNWScope() int32 {
	if x != nil && x.DstNWScope != nil {
		return *x.DstNWScope
	}
	return 0
}

func (x *FirewallMsg) GetSrcDNHostname() string {
	if x != nil && x.SrcDNHostname != nil {
		return *x.SrcDNHostname
	}
	return ""
}

func (x *FirewallMsg) GetDstDNHostname() string {
	if x != nil && x.DstDNHostname != nil {
		return *x.DstDNHostname
	}
	return ""
}

func (x *FirewallMsg) GetSrcDHMacAddress() string {
	if x != nil && x.SrcDHMacAddress != nil {
		return *x.SrcDHMacAddress
	}
	return ""
}

func (x *FirewallMsg) GetDstDHMacAddress() string {
	if x != nil && x.DstDHMacAddress != nil {
		return *x.DstDHMacAddress
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPUserId() string {
	if x != nil && x.SrcIPUserId != nil {
		return *x.SrcIPUserId
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPDivision() string {
	if x != nil && x.SrcIPDivision != nil {
		return *x.SrcIPDivision
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPDepartment() string {
	if x != nil && x.SrcIPDepartment != nil {
		return *x.SrcIPDepartment
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPPeerGroup() string {
	if x != nil && x.SrcIPPeerGroup != nil {
		return *x.SrcIPPeerGroup
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPHVE() int32 {
	if x != nil && x.SrcIPHVE != nil {
		return *x.SrcIPHVE
	}
	return 0
}

func (x *FirewallMsg) GetSrcIPBizProc() string {
	if x != nil && x.SrcIPBizProc != nil {
		return *x.SrcIPBizProc
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPUserPeerGroup() string {
	if x != nil && x.SrcIPUserPeerGroup != nil {
		return *x.SrcIPUserPeerGroup
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPDevicePeerGroup() string {
	if x != nil && x.SrcIPDevicePeerGroup != nil {
		return *x.SrcIPDevicePeerGroup
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPUserHVE() int32 {
	if x != nil && x.SrcIPUserHVE != nil {
		return *x.SrcIPUserHVE
	}
	return 0
}

func (x *FirewallMsg) GetSrcIPUserBizProc() string {
	if x != nil && x.SrcIPUserBizProc != nil {
		return *x.SrcIPUserBizProc
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPUserFName() string {
	if x != nil && x.SrcIPUserFName != nil {
		return *x.SrcIPUserFName
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPUserLName() string {
	if x != nil && x.SrcIPUserLName != nil {
		return *x.SrcIPUserLName
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPUserCity() string {
	if x != nil && x.SrcIPUserCity != nil {
		return *x.SrcIPUserCity
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPUserRegion() string {
	if x != nil && x.SrcIPUserRegion != nil {
		return *x.SrcIPUserRegion
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPUserCountry() string {
	if x != nil && x.SrcIPUserCountry != nil {
		return *x.SrcIPUserCountry
	}
	return ""
}

func (x *FirewallMsg) GetSrcIPIsUserDevice() int32 {
	if x != nil && x.SrcIPIsUserDevice != nil {
		return *x.SrcIPIsUserDevice
	}
	return 0
}

func (x *FirewallMsg) GetDstIPUserId() string {
	if x != nil && x.DstIPUserId != nil {
		return *x.DstIPUserId
	}
	return ""
}

func (x *FirewallMsg) GetDstIPDivision() string {
	if x != nil && x.DstIPDivision != nil {
		return *x.DstIPDivision
	}
	return ""
}

func (x *FirewallMsg) GetDstIPDepartment() string {
	if x != nil && x.DstIPDepartment != nil {
		return *x.DstIPDepartment
	}
	return ""
}

func (x *FirewallMsg) GetDstIPPeerGroup() string {
	if x != nil && x.DstIPPeerGroup != nil {
		return *x.DstIPPeerGroup
	}
	return ""
}

func (x *FirewallMsg) GetDstIPUserPeerGroup() string {
	if x != nil && x.DstIPUserPeerGroup != nil {
		return *x.DstIPUserPeerGroup
	}
	return ""
}

func (x *FirewallMsg) GetDstIPDevicePeerGroup() string {
	if x != nil && x.DstIPDevicePeerGroup != nil {
		return *x.DstIPDevicePeerGroup
	}
	return ""
}

func (x *FirewallMsg) GetDstIPHVE() int32 {
	if x != nil && x.DstIPHVE != nil {
		return *x.DstIPHVE
	}
	return 0
}

func (x *FirewallMsg) GetDstIPUserHVE() int32 {
	if x != nil && x.DstIPUserHVE != nil {
		return *x.DstIPUserHVE
	}
	return 0
}

func (x *FirewallMsg) GetDstIPBizProc() string {
	if x != nil && x.DstIPBizProc != nil {
		return *x.DstIPBizProc
	}
	return ""
}

func (x *FirewallMsg) GetDstIPUserBizProc() string {
	if x != nil && x.DstIPUserBizProc != nil {
		return *x.DstIPUserBizProc
	}
	return ""
}

func (x *FirewallMsg) GetDstIPUserFName() string {
	if x != nil && x.DstIPUserFName != nil {
		return *x.DstIPUserFName
	}
	return ""
}

func (x *FirewallMsg) GetDstIPUserLName() string {
	if x != nil && x.DstIPUserLName != nil {
		return *x.DstIPUserLName
	}
	return ""
}

func (x *FirewallMsg) GetDstIPUserCity() string {
	if x != nil && x.DstIPUserCity != nil {
		return *x.DstIPUserCity
	}
	return ""
}

func (x *FirewallMsg) GetDstIPUserRegion() string {
	if x != nil && x.DstIPUserRegion != nil {
		return *x.DstIPUserRegion
	}
	return ""
}

func (x *FirewallMsg) GetDstIPUserCountry() string {
	if x != nil && x.DstIPUserCountry != nil {
		return *x.DstIPUserCountry
	}
	return ""
}

func (x *FirewallMsg) GetDstIPIsUserDevice() int32 {
	if x != nil && x.DstIPIsUserDevice != nil {
		return *x.DstIPIsUserDevice
	}
	return 0
}

func (x *FirewallMsg) GetSrcTFScore() float64 {
	if x != nil && x.SrcTFScore != nil {
		return *x.SrcTFScore
	}
	return 0
}

func (x *FirewallMsg) GetSrcTFLatitude() float64 {
	if x != nil && x.SrcTFLatitude != nil {
		return *x.SrcTFLatitude
	}
	return 0
}

func (x *FirewallMsg) GetSrcTFLongitude() float64 {
	if x != nil && x.SrcTFLongitude != nil {
		return *x.SrcTFLongitude
	}
	return 0
}

func (x *FirewallMsg) GetSrcTFCountry() string {
	if x != nil && x.SrcTFCountry != nil {
		return *x.SrcTFCountry
	}
	return ""
}

func (x *FirewallMsg) GetSrcTFProtocol() string {
	if x != nil && x.SrcTFProtocol != nil {
		return *x.SrcTFProtocol
	}
	return ""
}

func (x *FirewallMsg) GetSrcTFCategory() string {
	if x != nil && x.SrcTFCategory != nil {
		return *x.SrcTFCategory
	}
	return ""
}

func (x *FirewallMsg) GetSrcTFHit() int32 {
	if x != nil && x.SrcTFHit != nil {
		return *x.SrcTFHit
	}
	return 0
}

func (x *FirewallMsg) GetDstTFScore() float64 {
	if x != nil && x.DstTFScore != nil {
		return *x.DstTFScore
	}
	return 0
}

func (x *FirewallMsg) GetDstTFLatitude() float64 {
	if x != nil && x.DstTFLatitude != nil {
		return *x.DstTFLatitude
	}
	return 0
}

func (x *FirewallMsg) GetDstTFLongitude() float64 {
	if x != nil && x.DstTFLongitude != nil {
		return *x.DstTFLongitude
	}
	return 0
}

func (x *FirewallMsg) GetDstTFCountry() string {
	if x != nil && x.DstTFCountry != nil {
		return *x.DstTFCountry
	}
	return ""
}

func (x *FirewallMsg) GetDstTFProtocol() string {
	if x != nil && x.DstTFProtocol != nil {
		return *x.DstTFProtocol
	}
	return ""
}

func (x *FirewallMsg) GetDstTFCategory() string {
	if x != nil && x.DstTFCategory != nil {
		return *x.DstTFCategory
	}
	return ""
}

func (x *FirewallMsg) GetDstTFHit() int32 {
	if x != nil && x.DstTFHit != nil {
		return *x.DstTFHit
	}
	return 0
}

var File_Firewall_proto protoreflect.FileDescriptor

var file_Firewall_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xab, 0x19, 0x0a, 0x0b, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65,
	0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x75,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x57,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0b,
	0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xea, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x18, 0xeb, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0xec, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0xee, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x79, 0x70,
	0x65, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x53, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x73,
	0x74, 0x4e, 0x57, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64,
	0x73, 0x74, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xf3, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0xf4, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79,
	0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x4e,
	0x57, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x73, 0x74,
	0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xf7, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x4e,
	0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x73, 0x74,
	0x4e, 0x57, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x73, 0x74, 0x4e, 0x57, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x4e,
	0x57, 0x54, 0x79, 0x70, 0x65, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x73,
	0x74, 0x4e, 0x57, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x4e, 0x57,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0xfb, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x73,
	0x74, 0x4e, 0x57, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x44,
	0x4e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x72, 0x63, 0x44, 0x4e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x44, 0x4e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x44, 0x4e, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x44, 0x48, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x72, 0x63, 0x44, 0x48, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x44, 0x48, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x73, 0x74,
	0x44, 0x48, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0b,
	0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x80, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x83, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x49,
	0x50, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x49, 0x50, 0x48, 0x56, 0x45, 0x18, 0x84, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x72, 0x63, 0x49, 0x50, 0x48, 0x56, 0x45, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x50,
	0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x18, 0x85, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x72, 0x63, 0x49, 0x50, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x2f, 0x0a, 0x12,
	0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x86, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x72, 0x63, 0x49, 0x50,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a,
	0x14, 0x73, 0x72, 0x63, 0x49, 0x50, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x87, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x72,
	0x63, 0x49, 0x50, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x56, 0x45, 0x18, 0x88, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x50,
	0x55, 0x73, 0x65, 0x72, 0x48, 0x56, 0x45, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x49, 0x50,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x18, 0x89, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a,
	0x50, 0x72, 0x6f, 0x63, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x8a, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x8b, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18, 0x8c, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a,
	0x0f, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x8d, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x49,
	0x50, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x8e, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x11, 0x73, 0x72, 0x63, 0x49, 0x50, 0x49, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x8f, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x73, 0x72, 0x63, 0x49, 0x50, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x90, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x49,
	0x50, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x49, 0x50,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x91, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x73, 0x74, 0x49, 0x50, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x0f, 0x64, 0x73, 0x74, 0x49, 0x50, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x92, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x73, 0x74, 0x49, 0x50, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x73, 0x74,
	0x49, 0x50, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x93, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x49, 0x50, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x2f, 0x0a, 0x12, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x94, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x14, 0x64, 0x73, 0x74, 0x49, 0x50, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x95, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x73, 0x74, 0x49, 0x50, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x49,
	0x50, 0x48, 0x56, 0x45, 0x18, 0x96, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x73, 0x74,
	0x49, 0x50, 0x48, 0x56, 0x45, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73,
	0x65, 0x72, 0x48, 0x56, 0x45, 0x18, 0x97, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x73,
	0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x48, 0x56, 0x45, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x73,
	0x74, 0x49, 0x50, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x18, 0x98, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x50, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12,
	0x2b, 0x0a, 0x10, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x50,
	0x72, 0x6f, 0x63, 0x18, 0x99, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x74, 0x49,
	0x50, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x27, 0x0a, 0x0e,
	0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x9a,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x9b, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x9c, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x9d, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x10, 0x64, 0x73, 0x74, 0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x9e, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x74,
	0x49, 0x50, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a,
	0x11, 0x64, 0x73, 0x74, 0x49, 0x50, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x9f, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x73, 0x74, 0x49, 0x50,
	0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x73, 0x72, 0x63, 0x54, 0x46, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xa0, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x46, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a,
	0x0d, 0x73, 0x72, 0x63, 0x54, 0x46, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xa1,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x54, 0x46, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x54, 0x46, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xa2, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73,
	0x72, 0x63, 0x54, 0x46, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x72, 0x63, 0x54, 0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xa3, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x54, 0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x54, 0x46, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0xa4, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x54,
	0x46, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63,
	0x54, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0xa5, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x54, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x54, 0x46, 0x48, 0x69, 0x74, 0x18, 0xa6, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x72, 0x63, 0x54, 0x46, 0x48, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0a, 0x64, 0x73, 0x74, 0x54, 0x46, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xa7, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x46, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0xa8, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x4c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x54, 0x46, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xa9, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x64, 0x73, 0x74, 0x54, 0x46, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x64, 0x73, 0x74, 0x54, 0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xaa,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x54, 0x46, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xab, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x73, 0x74,
	0x54, 0x46, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73,
	0x74, 0x54, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0xac, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x54, 0x46, 0x48, 0x69, 0x74, 0x18, 0xad, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x73, 0x74, 0x54, 0x46, 0x48, 0x69, 0x74, 0x42, 0x26,
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x73, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x08, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
}

var (
	file_Firewall_proto_rawDescOnce sync.Once
	file_Firewall_proto_rawDescData = file_Firewall_proto_rawDesc
)

func file_Firewall_proto_rawDescGZIP() []byte {
	file_Firewall_proto_rawDescOnce.Do(func() {
		file_Firewall_proto_rawDescData = protoimpl.X.CompressGZIP(file_Firewall_proto_rawDescData)
	})
	return file_Firewall_proto_rawDescData
}

var file_Firewall_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_Firewall_proto_goTypes = []interface{}{
	(*FirewallMsg)(nil), // 0: FirewallMsg
}
var file_Firewall_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Firewall_proto_init() }
func file_Firewall_proto_init() {
	if File_Firewall_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Firewall_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Firewall_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Firewall_proto_goTypes,
		DependencyIndexes: file_Firewall_proto_depIdxs,
		MessageInfos:      file_Firewall_proto_msgTypes,
	}.Build()
	File_Firewall_proto = out.File
	file_Firewall_proto_rawDesc = nil
	file_Firewall_proto_goTypes = nil
	file_Firewall_proto_depIdxs = nil
}
