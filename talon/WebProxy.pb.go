// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.13.0
// source: WebProxy.proto

package talon

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WebProxyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId        *string  `protobuf:"bytes,1,opt,name=recordId" json:"recordId,omitempty"`                  // a unique identifier that is associated with each web proxy event record
	Timestamp       *int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`               // an integer that represents the date and time (in milliseconds) at which IngestServer received the web proxy record
	FeedId          *string  `protobuf:"bytes,3,opt,name=feedId" json:"feedId,omitempty"`                      // a constant in every row that identifies the record type
	Version         *int32   `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`                   // the version of the vendor that is  associated with the web proxy event
	StartTime       *int64   `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"`               // the date and time at which the web proxy event started
	Action          *string  `protobuf:"bytes,6,opt,name=action" json:"action,omitempty"`                      // the action (such as allowed or blocked) that is applied to the attempted connection to the URL
	Reason          *string  `protobuf:"bytes,7,opt,name=reason" json:"reason,omitempty"`                      // the reason that is associated with the action
	SrcIpAddress    *string  `protobuf:"bytes,8,opt,name=srcIpAddress" json:"srcIpAddress,omitempty"`          // the source IP address that is associated with the web proxy event
	DstHostname     *string  `protobuf:"bytes,9,opt,name=dstHostname" json:"dstHostname,omitempty"`            // the destination host name that is associated with the URL
	DstIpAddress    *string  `protobuf:"bytes,10,opt,name=dstIpAddress" json:"dstIpAddress,omitempty"`         // the destination IPv4 or IPv6 address that is associated with the URL
	DstPort         *int32   `protobuf:"varint,11,opt,name=dstPort" json:"dstPort,omitempty"`                  // the destination port that is associated with the URL
	UserId          *string  `protobuf:"bytes,12,opt,name=userId" json:"userId,omitempty"`                     // the unique identifier of the user that is associated with the web proxy event
	Email           *string  `protobuf:"bytes,13,opt,name=email" json:"email,omitempty"`                       // the email address of the user that is associated with the web proxy event
	RqBytes         *int32   `protobuf:"varint,14,opt,name=rqBytes" json:"rqBytes,omitempty"`                  // the number of bytes that are associated with the request
	RsBytes         *int32   `protobuf:"varint,15,opt,name=rsBytes" json:"rsBytes,omitempty"`                  // the number of bytes that are associated with the response
	Protocol        *string  `protobuf:"bytes,16,opt,name=protocol" json:"protocol,omitempty"`                 // the IP protocol type (for example, TCP, HTTP, and HTTP) that is associated with the web proxy event
	Url             *string  `protobuf:"bytes,17,opt,name=url" json:"url,omitempty"`                           // the destination URL
	UrlClass        *string  `protobuf:"bytes,18,opt,name=urlClass" json:"urlClass,omitempty"`                 // the class of the destination URL (business use)
	UrlCategory     *string  `protobuf:"bytes,19,opt,name=urlCategory" json:"urlCategory,omitempty"`           // the URL category of the FQDN in the DNS request
	ReqMethod       *string  `protobuf:"bytes,20,opt,name=reqMethod" json:"reqMethod,omitempty"`               // the HTTP request method
	PageRisk        *float64 `protobuf:"fixed64,21,opt,name=pageRisk" json:"pageRisk,omitempty"`               // the page risk score for the destination URL
	StatusCode      *int32   `protobuf:"varint,22,opt,name=statusCode" json:"statusCode,omitempty"`            // the HTTP response code that is sent to the client
	ThreatCategory  *string  `protobuf:"bytes,23,opt,name=threatCategory" json:"threatCategory,omitempty"`     // the category of the threat that is detected with the web proxy event
	ThreatName      *string  `protobuf:"bytes,24,opt,name=threatName" json:"threatName,omitempty"`             // the name of the virus or malware that the service detected, if any, with the web proxy event
	AppName         *string  `protobuf:"bytes,25,opt,name=appName" json:"appName,omitempty"`                   // the application name that is associated with the web proxy event
	Division        *string  `protobuf:"bytes,1000,opt,name=division" json:"division,omitempty"`               // the division of the user that is associated with the web proxy event
	Department      *string  `protobuf:"bytes,1001,opt,name=department" json:"department,omitempty"`           // the department of the user that is associated with the web proxy event
	PeerGroup       *string  `protobuf:"bytes,1002,opt,name=peerGroup" json:"peerGroup,omitempty"`             // the assigned peer group of the user that is associated with this event
	HVE             *int32   `protobuf:"varint,1003,opt,name=HVE" json:"HVE,omitempty"`                        // the high-value entity value that is associated with the device
	BizProc         *string  `protobuf:"bytes,1004,opt,name=bizProc" json:"bizProc,omitempty"`                 // the business process associated with the device
	SrcNWSiteCode   *string  `protobuf:"bytes,1005,opt,name=srcNWSiteCode" json:"srcNWSiteCode,omitempty"`     // the site code that is associated with the source IP address
	SrcNWCountry    *string  `protobuf:"bytes,1006,opt,name=srcNWCountry" json:"srcNWCountry,omitempty"`       // the name of the country that is associated with the source IP address
	SrcNWRegion     *string  `protobuf:"bytes,1007,opt,name=srcNWRegion" json:"srcNWRegion,omitempty"`         // the region that is associated with the source IP address
	SrcNWCity       *string  `protobuf:"bytes,1008,opt,name=srcNWCity" json:"srcNWCity,omitempty"`             // the city that is associated with the source IP address
	SrcNWLatitude   *float64 `protobuf:"fixed64,1009,opt,name=srcNWLatitude" json:"srcNWLatitude,omitempty"`   // the latitude that is associated with the source IP address
	SrcNWLongitude  *float64 `protobuf:"fixed64,1010,opt,name=srcNWLongitude" json:"srcNWLongitude,omitempty"` // the longitude that is associated with the source IP address
	SrcNWTzOffset   *int32   `protobuf:"varint,1011,opt,name=srcNWTzOffset" json:"srcNWTzOffset,omitempty"`    // the time zone offset that is associated with the source IP address
	SrcNWName       *string  `protobuf:"bytes,1012,opt,name=srcNWName" json:"srcNWName,omitempty"`             // the network name that is associated with the source IP address
	SrcNWType       *string  `protobuf:"bytes,1013,opt,name=srcNWType" json:"srcNWType,omitempty"`             // the network type that is associated with the source IP address
	SrcNWScope      *int32   `protobuf:"varint,1014,opt,name=srcNWScope" json:"srcNWScope,omitempty"`          // an integer that indicates whether network information could be associated with the source IP address
	DstTFScore      *float64 `protobuf:"fixed64,1015,opt,name=dstTFScore" json:"dstTFScore,omitempty"`         // the risk score of the destination IP address that is associated with the threat feed correlation
	DstTFLatitude   *float64 `protobuf:"fixed64,1016,opt,name=dstTFLatitude" json:"dstTFLatitude,omitempty"`   // the latitude of the destination IP address that is associated with the threat feed correlation
	DstTFLongitude  *float64 `protobuf:"fixed64,1017,opt,name=dstTFLongitude" json:"dstTFLongitude,omitempty"` // the longitude of the destination IP address that is associated with the threat feed correlation
	DstTFCountry    *string  `protobuf:"bytes,1018,opt,name=dstTFCountry" json:"dstTFCountry,omitempty"`       // the country of the destination IP address that is associated with the threat feed correlation
	DstTFProtocol   *string  `protobuf:"bytes,1019,opt,name=dstTFProtocol" json:"dstTFProtocol,omitempty"`     // the protocol of the threat feed correlation that is associated with the destination IP address
	DstTFCategory   *string  `protobuf:"bytes,1020,opt,name=dstTFCategory" json:"dstTFCategory,omitempty"`     // the category of the threat feed correlation that is associated with the destination IP address
	DstTFHit        *int32   `protobuf:"varint,1021,opt,name=dstTFHit" json:"dstTFHit,omitempty"`              // an integer that indicates whether a threat feed is associated with the destination IP address
	DevicePeerGroup *string  `protobuf:"bytes,1022,opt,name=devicePeerGroup" json:"devicePeerGroup,omitempty"` // the assigned peer group of the device
	UserPeerGroup   *string  `protobuf:"bytes,1023,opt,name=userPeerGroup" json:"userPeerGroup,omitempty"`     // the assigned peer group of the user that is associated with the source IP address
	UserHVE         *int32   `protobuf:"varint,1024,opt,name=userHVE" json:"userHVE,omitempty"`                // the high-value entity value for the user that is associated with the source IP address
	UserBizProc     *string  `protobuf:"bytes,1025,opt,name=userBizProc" json:"userBizProc,omitempty"`         // the business process for the user that is associated with the source IP address
	IsUserDevice    *int32   `protobuf:"varint,1026,opt,name=isUserDevice" json:"isUserDevice,omitempty"`      // a flag that indicates whether the device is a user device
	UserFName       *string  `protobuf:"bytes,1027,opt,name=userFName" json:"userFName,omitempty"`             // the first name of the user that is associated with this event
	UserLName       *string  `protobuf:"bytes,1028,opt,name=userLName" json:"userLName,omitempty"`             // the last name of the user that is associated with this event
	UserCity        *string  `protobuf:"bytes,1029,opt,name=userCity" json:"userCity,omitempty"`               // the city of the user that is associated with this event
	UserRegion      *string  `protobuf:"bytes,1030,opt,name=userRegion" json:"userRegion,omitempty"`           // the region of the user that is associated with this event
	UserCountry     *string  `protobuf:"bytes,1031,opt,name=userCountry" json:"userCountry,omitempty"`         // the country of the user that is associated with this event
}

func (x *WebProxyMsg) Reset() {
	*x = WebProxyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WebProxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebProxyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebProxyMsg) ProtoMessage() {}

func (x *WebProxyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WebProxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebProxyMsg.ProtoReflect.Descriptor instead.
func (*WebProxyMsg) Descriptor() ([]byte, []int) {
	return file_WebProxy_proto_rawDescGZIP(), []int{0}
}

func (x *WebProxyMsg) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *WebProxyMsg) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *WebProxyMsg) GetFeedId() string {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return ""
}

func (x *WebProxyMsg) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *WebProxyMsg) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *WebProxyMsg) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *WebProxyMsg) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *WebProxyMsg) GetSrcIpAddress() string {
	if x != nil && x.SrcIpAddress != nil {
		return *x.SrcIpAddress
	}
	return ""
}

func (x *WebProxyMsg) GetDstHostname() string {
	if x != nil && x.DstHostname != nil {
		return *x.DstHostname
	}
	return ""
}

func (x *WebProxyMsg) GetDstIpAddress() string {
	if x != nil && x.DstIpAddress != nil {
		return *x.DstIpAddress
	}
	return ""
}

func (x *WebProxyMsg) GetDstPort() int32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *WebProxyMsg) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *WebProxyMsg) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *WebProxyMsg) GetRqBytes() int32 {
	if x != nil && x.RqBytes != nil {
		return *x.RqBytes
	}
	return 0
}

func (x *WebProxyMsg) GetRsBytes() int32 {
	if x != nil && x.RsBytes != nil {
		return *x.RsBytes
	}
	return 0
}

func (x *WebProxyMsg) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *WebProxyMsg) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *WebProxyMsg) GetUrlClass() string {
	if x != nil && x.UrlClass != nil {
		return *x.UrlClass
	}
	return ""
}

func (x *WebProxyMsg) GetUrlCategory() string {
	if x != nil && x.UrlCategory != nil {
		return *x.UrlCategory
	}
	return ""
}

func (x *WebProxyMsg) GetReqMethod() string {
	if x != nil && x.ReqMethod != nil {
		return *x.ReqMethod
	}
	return ""
}

func (x *WebProxyMsg) GetPageRisk() float64 {
	if x != nil && x.PageRisk != nil {
		return *x.PageRisk
	}
	return 0
}

func (x *WebProxyMsg) GetStatusCode() int32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *WebProxyMsg) GetThreatCategory() string {
	if x != nil && x.ThreatCategory != nil {
		return *x.ThreatCategory
	}
	return ""
}

func (x *WebProxyMsg) GetThreatName() string {
	if x != nil && x.ThreatName != nil {
		return *x.ThreatName
	}
	return ""
}

func (x *WebProxyMsg) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *WebProxyMsg) GetDivision() string {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return ""
}

func (x *WebProxyMsg) GetDepartment() string {
	if x != nil && x.Department != nil {
		return *x.Department
	}
	return ""
}

func (x *WebProxyMsg) GetPeerGroup() string {
	if x != nil && x.PeerGroup != nil {
		return *x.PeerGroup
	}
	return ""
}

func (x *WebProxyMsg) GetHVE() int32 {
	if x != nil && x.HVE != nil {
		return *x.HVE
	}
	return 0
}

func (x *WebProxyMsg) GetBizProc() string {
	if x != nil && x.BizProc != nil {
		return *x.BizProc
	}
	return ""
}

func (x *WebProxyMsg) GetSrcNWSiteCode() string {
	if x != nil && x.SrcNWSiteCode != nil {
		return *x.SrcNWSiteCode
	}
	return ""
}

func (x *WebProxyMsg) GetSrcNWCountry() string {
	if x != nil && x.SrcNWCountry != nil {
		return *x.SrcNWCountry
	}
	return ""
}

func (x *WebProxyMsg) GetSrcNWRegion() string {
	if x != nil && x.SrcNWRegion != nil {
		return *x.SrcNWRegion
	}
	return ""
}

func (x *WebProxyMsg) GetSrcNWCity() string {
	if x != nil && x.SrcNWCity != nil {
		return *x.SrcNWCity
	}
	return ""
}

func (x *WebProxyMsg) GetSrcNWLatitude() float64 {
	if x != nil && x.SrcNWLatitude != nil {
		return *x.SrcNWLatitude
	}
	return 0
}

func (x *WebProxyMsg) GetSrcNWLongitude() float64 {
	if x != nil && x.SrcNWLongitude != nil {
		return *x.SrcNWLongitude
	}
	return 0
}

func (x *WebProxyMsg) GetSrcNWTzOffset() int32 {
	if x != nil && x.SrcNWTzOffset != nil {
		return *x.SrcNWTzOffset
	}
	return 0
}

func (x *WebProxyMsg) GetSrcNWName() string {
	if x != nil && x.SrcNWName != nil {
		return *x.SrcNWName
	}
	return ""
}

func (x *WebProxyMsg) GetSrcNWType() string {
	if x != nil && x.SrcNWType != nil {
		return *x.SrcNWType
	}
	return ""
}

func (x *WebProxyMsg) GetSrcNWScope() int32 {
	if x != nil && x.SrcNWScope != nil {
		return *x.SrcNWScope
	}
	return 0
}

func (x *WebProxyMsg) GetDstTFScore() float64 {
	if x != nil && x.DstTFScore != nil {
		return *x.DstTFScore
	}
	return 0
}

func (x *WebProxyMsg) GetDstTFLatitude() float64 {
	if x != nil && x.DstTFLatitude != nil {
		return *x.DstTFLatitude
	}
	return 0
}

func (x *WebProxyMsg) GetDstTFLongitude() float64 {
	if x != nil && x.DstTFLongitude != nil {
		return *x.DstTFLongitude
	}
	return 0
}

func (x *WebProxyMsg) GetDstTFCountry() string {
	if x != nil && x.DstTFCountry != nil {
		return *x.DstTFCountry
	}
	return ""
}

func (x *WebProxyMsg) GetDstTFProtocol() string {
	if x != nil && x.DstTFProtocol != nil {
		return *x.DstTFProtocol
	}
	return ""
}

func (x *WebProxyMsg) GetDstTFCategory() string {
	if x != nil && x.DstTFCategory != nil {
		return *x.DstTFCategory
	}
	return ""
}

func (x *WebProxyMsg) GetDstTFHit() int32 {
	if x != nil && x.DstTFHit != nil {
		return *x.DstTFHit
	}
	return 0
}

func (x *WebProxyMsg) GetDevicePeerGroup() string {
	if x != nil && x.DevicePeerGroup != nil {
		return *x.DevicePeerGroup
	}
	return ""
}

func (x *WebProxyMsg) GetUserPeerGroup() string {
	if x != nil && x.UserPeerGroup != nil {
		return *x.UserPeerGroup
	}
	return ""
}

func (x *WebProxyMsg) GetUserHVE() int32 {
	if x != nil && x.UserHVE != nil {
		return *x.UserHVE
	}
	return 0
}

func (x *WebProxyMsg) GetUserBizProc() string {
	if x != nil && x.UserBizProc != nil {
		return *x.UserBizProc
	}
	return ""
}

func (x *WebProxyMsg) GetIsUserDevice() int32 {
	if x != nil && x.IsUserDevice != nil {
		return *x.IsUserDevice
	}
	return 0
}

func (x *WebProxyMsg) GetUserFName() string {
	if x != nil && x.UserFName != nil {
		return *x.UserFName
	}
	return ""
}

func (x *WebProxyMsg) GetUserLName() string {
	if x != nil && x.UserLName != nil {
		return *x.UserLName
	}
	return ""
}

func (x *WebProxyMsg) GetUserCity() string {
	if x != nil && x.UserCity != nil {
		return *x.UserCity
	}
	return ""
}

func (x *WebProxyMsg) GetUserRegion() string {
	if x != nil && x.UserRegion != nil {
		return *x.UserRegion
	}
	return ""
}

func (x *WebProxyMsg) GetUserCountry() string {
	if x != nil && x.UserCountry != nil {
		return *x.UserCountry
	}
	return ""
}

var File_WebProxy_proto protoreflect.FileDescriptor

var file_WebProxy_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x99, 0x0e, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65,
	0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72,
	0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x73, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x72, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x72, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x72,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x72, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x11, 0x0a, 0x03, 0x48, 0x56, 0x45, 0x18, 0xeb, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x48, 0x56, 0x45, 0x12, 0x19, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x50,
	0x72, 0x6f, 0x63, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x50,
	0x72, 0x6f, 0x63, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63,
	0x4e, 0x57, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x72,
	0x63, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xef,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74, 0x79, 0x18,
	0xf0, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x4e,
	0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x54, 0x7a, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4e, 0x57,
	0x54, 0x7a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e,
	0x57, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72,
	0x63, 0x4e, 0x57, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4e, 0x57,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63,
	0x4e, 0x57, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x57, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x4e, 0x57, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x46,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x73,
	0x74, 0x54, 0x46, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x54,
	0x46, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x54, 0x46, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x54, 0x46, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x54,
	0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x73, 0x74, 0x54, 0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a,
	0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xfb,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x54, 0x46, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x73,
	0x74, 0x54, 0x46, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x08, 0x64,
	0x73, 0x74, 0x54, 0x46, 0x48, 0x69, 0x74, 0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x73, 0x74, 0x54, 0x46, 0x48, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xfe, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x48, 0x56, 0x45, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x48, 0x56, 0x45, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x7a,
	0x50, 0x72, 0x6f, 0x63, 0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x83, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18, 0x85, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x86, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x87, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x26, 0x0a, 0x1a,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x73, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x08, 0x57, 0x65, 0x62, 0x50,
	0x72, 0x6f, 0x78, 0x79,
}

var (
	file_WebProxy_proto_rawDescOnce sync.Once
	file_WebProxy_proto_rawDescData = file_WebProxy_proto_rawDesc
)

func file_WebProxy_proto_rawDescGZIP() []byte {
	file_WebProxy_proto_rawDescOnce.Do(func() {
		file_WebProxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_WebProxy_proto_rawDescData)
	})
	return file_WebProxy_proto_rawDescData
}

var file_WebProxy_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_WebProxy_proto_goTypes = []interface{}{
	(*WebProxyMsg)(nil), // 0: WebProxyMsg
}
var file_WebProxy_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_WebProxy_proto_init() }
func file_WebProxy_proto_init() {
	if File_WebProxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_WebProxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebProxyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_WebProxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WebProxy_proto_goTypes,
		DependencyIndexes: file_WebProxy_proto_depIdxs,
		MessageInfos:      file_WebProxy_proto_msgTypes,
	}.Build()
	File_WebProxy_proto = out.File
	file_WebProxy_proto_rawDesc = nil
	file_WebProxy_proto_goTypes = nil
	file_WebProxy_proto_depIdxs = nil
}
